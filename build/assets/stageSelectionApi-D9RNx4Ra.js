import{u as l}from"./useQuery-D3U2IXUF.js";import{u as n,f as u}from"./index-Di9fivK2.js";import{u as c}from"./useMutation-Br_DKCOJ.js";import{g as i}from"./roleCheck-CZ0YkMwP.js";const w=async({projectId:t,api:e})=>(await e.get(`/selectedstage/getselectedstage/${t}`)).data.data,f=async({projectId:t,mode:e,api:o})=>(await o.post(`/selectedstage/updateselectedstage/${t}`,{mode:e})).data.data,m=t=>{const{role:e}=n(),o=i(e),r=["owner","CTO","staff"];return l({queryKey:["stage-selection",t],queryFn:async()=>{if(!e)throw new Error("Not Authorized");if(!r.includes(e))throw new Error("Not allowed to make this API call");if(!o)throw new Error("API instance not found for role");return await w({projectId:t,api:o})},enabled:!!t&&!!e,retry:!1})},h=()=>{const t=u(),{role:e}=n(),o=["owner","CTO","staff"],r=i(e);return c({mutationFn:async({projectId:a,mode:s})=>{if(!e)throw new Error("Not Authorized");if(!o.includes(e))throw new Error("Not allowed to make this API call");if(!r)throw new Error("API instance not found for role");return await f({projectId:a,mode:s,api:r})},onSuccess:(a,{projectId:s})=>{t.invalidateQueries({queryKey:["stage-selection",s]})}})};export{h as a,m as u};
