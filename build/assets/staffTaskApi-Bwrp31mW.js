import{d as n,q as c}from"./index-ftjmZ4WH.js";import{g as o}from"./roleCheck-BuedAs3v.js";import{d as w}from"./useQuery-DmDT-v30.js";import{u}from"./useMutation-CSGCjuCw.js";const i=["owner","staff","CTO"],d=async({tasks:s,assigneRole:a,api:t})=>{const{data:e}=await t.post("/stafftasks/tasks/bulk",{tasks:s,assigneRole:a});if(!e.ok)throw new Error(e.message);return e.data},b=async({title:s,api:a})=>{const{data:t}=await a.get(`/stafftasks/suggest/subtasks?title=${encodeURIComponent(s)}`);if(!t.ok)throw new Error(t.message);return t.steps},l=async({filters:s,api:a,organizationId:t})=>{const e=new URLSearchParams(s).toString(),{data:r}=await a.get(`/stafftasks/${t}/tasks?${e}`);if(!r.ok)throw new Error(r.message);return r.data},k=async({id:s,api:a})=>{const{data:t}=await a.get(`/stafftasks/singletask/${s}`);if(!t.ok)throw new Error(t.message);return t.data},h=async({organizationId:s,filters:a,api:t})=>{const e=new URLSearchParams(a).toString(),{data:r}=await t.get(`/stafftasks/associatedstaffstask/${s}?${e}`);if(!r.ok)throw new Error(r.message);return r.data},y=async({mainTaskId:s,updates:a,api:t})=>{const{data:e}=await t.patch(`/stafftasks/tasks/${s}`,a);if(!e.ok)throw new Error(e.message);return e.data},m=async({mainTaskId:s,api:a})=>{const{data:t}=await a.delete(`/stafftasks/tasks/${s}`);if(!t.ok)throw new Error(t.message);return t.data},g=async({mainTaskId:s,subTaskId:a,taskName:t,api:e})=>{const{data:r}=await e.patch(`/stafftasks/tasks/${s}/subtasks/${a}`,{taskName:t});if(!r.ok)throw new Error(r.message);return r.data},E=async({mainTaskId:s,subTaskId:a,api:t})=>{const{data:e}=await t.delete(`/stafftasks/tasks/${s}/subtasks/${a}`);if(!e.ok)throw new Error(e.message);return e.data},p=async({mainTaskId:s,subTaskId:a,status:t,subTask:e,api:r})=>{const{data:f}=await r.patch(`/stafftasks/tasks/${s}/subtasks/${a}/history`,{status:t,task:e});if(!f.ok)throw new Error(f.message);return f.data},q=()=>{const{role:s}=n(),a=o(s);return u({mutationFn:async({tasks:t,assigneRole:e})=>{if(!s||!i.includes(s))throw new Error("Not allowed");if(!a)throw new Error("Not Authenticated");return await d({tasks:t,assigneRole:e,api:a})},onSuccess:()=>{c.invalidateQueries({queryKey:["stafftasks"]})}})},$=(s,a)=>{const{role:t}=n(),e=o(t);return w({queryKey:["stafftasks",s,a],queryFn:async()=>{if(!t||!i.includes(t))throw new Error("Not allowed");if(!e)throw new Error("Not Authenticated");return l({filters:a,api:e,organizationId:s})},enabled:!!t})},F=s=>{const{role:a}=n(),t=o(a);return w({queryKey:["singlestafftasks",s],queryFn:async()=>{if(!a||!i.includes(a))throw new Error("Not allowed");if(!t)throw new Error("Not Authenticated");return k({id:s,api:t})},enabled:!!a})},K=(s,a)=>{const{role:t}=n(),e=o(t);return w({queryKey:["associatedstafftasks",s,a],queryFn:async()=>{if(!t||!i.includes(t))throw new Error("Not allowed");if(!e)throw new Error("Not Authenticated");return h({filters:a,api:e,organizationId:s})},enabled:!!t})},Q=()=>{const{role:s}=n(),a=o(s);return u({mutationFn:async({mainTaskId:t,updates:e})=>{if(!s||!i.includes(s))throw new Error("Not allowed");if(!a)throw new Error("API missing");return await y({mainTaskId:t,updates:e,api:a})},onSuccess:(t,{mainTaskId:e})=>{c.invalidateQueries({queryKey:["stafftasks",e]})}})},v=()=>{const{role:s}=n(),a=o(s);return u({mutationFn:async({mainTaskId:t})=>{if(!s||!i.includes(s))throw new Error("Not allowed");if(!a)throw new Error("Not Authenticated");return await m({mainTaskId:t,api:a})},onSuccess:()=>{c.invalidateQueries({queryKey:["stafftasks"]})}})},R=()=>{const{role:s}=n(),a=o(s);return u({mutationFn:async({mainTaskId:t,subTaskId:e,taskName:r})=>{if(!s||!i.includes(s))throw new Error("Not allowed");if(!a)throw new Error("Not Authenticated");return await g({mainTaskId:t,subTaskId:e,taskName:r,api:a})},onSuccess:(t,{mainTaskId:e})=>{c.invalidateQueries({queryKey:["stafftasks",e]})}})},U=()=>{const{role:s}=n(),a=o(s);return u({mutationFn:async({mainTaskId:t,subTaskId:e})=>{if(!s||!i.includes(s))throw new Error("Not allowed");if(!a)throw new Error("Not Authenticated");return await E({mainTaskId:t,subTaskId:e,api:a})},onSuccess:(t,{mainTaskId:e})=>{c.invalidateQueries({queryKey:["stafftasks",e]})}})},M=()=>{const{role:s}=n(),a=o(s);return u({mutationFn:async({mainTaskId:t,subTaskId:e,status:r,subTask:f})=>{if(!s||!i.includes(s))throw new Error("Not allowed");if(!a)throw new Error("Not Authenticated");return await p({mainTaskId:t,subTaskId:e,status:r,subTask:f,api:a})},onSuccess:(t,{mainTaskId:e})=>{c.invalidateQueries({queryKey:["singlestafftasks",e]})}})};export{q as a,K as b,v as c,M as d,F as e,Q as f,b as g,R as h,U as i,$ as u};
