import{u as d}from"./useQuery-CnKlDwE3.js";import{u as p}from"./useMutation-DAR9sTyS.js";import{a as r,q as i}from"./index-4xXsHyrq.js";import{g as c}from"./roleCheck-DDX7kp9U.js";const u=["owner","CTO","staff"],w=async({organizationId:e,api:t,filters:n,search:o})=>{const a=new URLSearchParams;e&&a.append("organizationId",e),n!=null&&n.projectId&&a.append("projectId",n.projectId),n!=null&&n.fromDept&&a.append("fromDept",n.fromDept),n!=null&&n.status&&a.append("status",n.status),o&&a.append("search",o);const{data:s}=await t.get(`/department/accounting/getaccountingall?${a.toString()}`);if(!s.ok)throw new Error(s.message);return s.data},l=async({id:e,api:t})=>{const{data:n}=await t.get(`/department/accounting/single/${e}`);if(!n.ok)throw new Error(n.message);return n.data},g=async({id:e,payload:t,api:n})=>{const{data:o}=await n.put(`/department/accounting/update/${e}`,t);if(!o.ok)throw new Error(o.message);return o.updated},m=async({id:e,api:t})=>{const{data:n}=await t.delete(`/department/accounting/delete/${e}`);if(!n.ok)throw new Error(n.message);return n.deleted},E=(e,t,n)=>{const{role:o}=r(),a=c(o);return d({queryKey:["accounting","all",e,t,n],queryFn:async()=>{if(!o||!u.includes(o))throw new Error("Not allowed");if(!a)throw new Error("API instance not found for role");return await w({organizationId:e,api:a,filters:t,search:n})},enabled:!!e&&!!o&&!!a})},q=e=>{const{role:t}=r(),n=c(t);return d({queryKey:["accounting","single"],queryFn:async()=>{if(!t||!u.includes(t))throw new Error("Not allowed");if(!n)throw new Error("API instance not found for role");return await l({id:e,api:n})},enabled:!!e&&!!t&&!!n})},S=()=>{const{role:e}=r(),t=c(e);return p({mutationFn:async({id:n,payload:o})=>{if(!e||!u.includes(e))throw new Error("Not allowed");if(!t)throw new Error("API instance not found for role");return await g({id:n,payload:o,api:t})},onSuccess:()=>{i.invalidateQueries({queryKey:["accounting","all"],exact:!1}),i.invalidateQueries({queryKey:["accounting","single"]})}})},F=()=>{const{role:e}=r(),t=c(e);return p({mutationFn:async({id:n})=>{if(!e||!u.includes(e))throw new Error("Not allowed");if(!t)throw new Error("API instance not found for role");return await m({id:n,api:t})},onSuccess:()=>{i.invalidateQueries({queryKey:["accounting","all"]})}})};export{E as a,q as b,S as c,F as u};
