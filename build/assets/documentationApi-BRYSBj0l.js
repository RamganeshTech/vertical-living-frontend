import{u as l}from"./useQuery-mUmMtORz.js";import{z as w,q as f}from"./index-DkfQDeIt.js";import{u}from"./useMutation-BWlLDX_I.js";import{u as s,g as i}from"./roleCheck-DNL7PxQZ.js";const y=async(n,o)=>{const{data:e}=await o.get(`/documentation/${n}/getalldetails`);if(!e.ok)throw new Error(e.message);return e.data},m=async(n,o,e)=>{const{data:t}=await e.get(`/documentation/${n}/stage/${o}`);if(!t.ok)throw new Error(t.message);return t.data},g=async(n,o,e,t)=>{const a=new FormData;e.forEach(c=>a.append("files",c));const{data:r}=await t.post(`/documentation/${n}/${o}/upload`,a);if(!r.ok)throw new Error(r.message);return r.data},h=async(n,o,e,t)=>{const{data:a}=await t.delete(`/documentation/${n}/${o}/file/${e}`);if(!a.ok)throw new Error(a.message);return a.data},p=async(n,o,e,t)=>{const{data:a}=await t.patch(`/documentation/${n}/${o}/description`,{description:e});if(!a.ok)throw new Error(a.message);return a.data},P=n=>{const o=["owner","CTO","staff","client"],{role:e}=s(),t=i(e);return l({queryKey:["stage-documentation",n],queryFn:async()=>{if(!e||!o.includes(e))throw new Error("Not allowed to make this API call.");if(!t)throw new Error("API instance not found.");return await y(n,t)},enabled:!!e&&!!n&&!!t,retry:!1,refetchOnMount:!1})},C=({projectId:n,stageNumber:o})=>{const e=["owner","CTO","staff","client"],{role:t}=s(),a=i(t);return l({queryKey:["stage-documentation",n,o],queryFn:async()=>{if(!t||!e.includes(t))throw new Error("Not allowed to make this API call.");if(!a)throw new Error("API instance not found.");return await m(n,o,a)},enabled:!!t&&!!n&&o!==void 0&&!!a,retry:!1,refetchOnMount:!1})},$=()=>{const n=["owner","CTO","staff"],{role:o}=s(),e=i(o),t=w();return u({mutationFn:async({projectId:a,stageNumber:r,files:c})=>{if(!o||!n.includes(o))throw new Error("Not allowed.");if(!e)throw new Error("API not found.");return await g(a,r,c,e)},onSuccess:(a,{projectId:r})=>{t.invalidateQueries({queryKey:["stage-documentation",r]})}})},k=()=>{const n=["owner","CTO","staff"],{role:o}=s(),e=i(o),t=w();return u({mutationFn:async({projectId:a,stageNumber:r,fileId:c})=>{if(!o||!n.includes(o))throw new Error("Not allowed.");if(!e)throw new Error("API not found.");return await h(a,r,c,e)},onSuccess:(a,{projectId:r})=>{t.invalidateQueries({queryKey:["stage-documentation",r]})}})},O=()=>{const n=["owner","CTO","staff"],{role:o}=s(),e=i(o),t=w();return u({mutationFn:async({projectId:a,stageNumber:r,description:c})=>{if(!o||!n.includes(o))throw new Error("Not allowed.");if(!e)throw new Error("API not found.");return await p(a,r,c,e)},onSuccess:(a,{projectId:r})=>{t.invalidateQueries({queryKey:["stage-documentation",r]})}})},E=async(n,o)=>{const{data:e}=await o.get(`/documentation/getclient/${n}/byproject`);if(!e.ok)throw new Error(e.message);return e.data},D=n=>{const o=["owner","CTO","staff"],{role:e}=s(),t=i(e);return l({queryKey:["stage-documentation",n],queryFn:async()=>{if(!e||!o.includes(e))throw new Error("Not allowed to make this API call.");if(!t)throw new Error("API instance not found.");return await E(n,t)},enabled:!!e&&!!n&&!!t,retry:!1,refetchOnMount:!1})},d=async(n,o,e)=>{const{data:t}=await e.get(`/documentation/sharemessage/${n}/${o}`);if(!t.ok)throw new Error(t.message);return t.data},R=({projectId:n,stageNumber:o})=>{const e=["owner","CTO","staff"],{role:t}=s(),a=i(t);return l({queryKey:["stage-documentation",n],queryFn:async()=>{if(!t||!e.includes(t))throw new Error("Not allowed to make this API call.");if(!a)throw new Error("API instance not found.");return await d(n,o,a)},enabled:!!t&&!!n&&!!a,retry:!1,refetchOnMount:!1})},T=()=>{const n=["owner","CTO","staff"],{role:o}=s(),e=i(o);return u({mutationFn:async({projectId:t,stageNumber:a})=>{if(!o||!n.includes(o))throw new Error("Not allowed to make this API call.");if(!e)throw new Error("API instance not found.");return await d(t,a,e)},onSuccess:(t,{projectId:a})=>{f.invalidateQueries({queryKey:["stage-documentation",a]})}})};export{R as a,P as b,C as c,$ as d,k as e,O as f,T as g,D as u};
