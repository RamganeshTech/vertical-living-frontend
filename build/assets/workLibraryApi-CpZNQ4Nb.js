import{u as w}from"./useQuery-CnKlDwE3.js";import{u as i}from"./useMutation-DAR9sTyS.js";import{a,q as u}from"./index-4xXsHyrq.js";import{g as n}from"./roleCheck-DDX7kp9U.js";const l=async({formData:r,api:o})=>{const{data:e}=await o.post("/worklib/creatework",r);if(!e.ok)throw new Error(e.message);return e.data},c=async({workId:r,formData:o,api:e})=>{const{data:t}=await e.put(`/worklib/update/${r}`,o);if(!t.ok)throw new Error(t.message);return t.data},y=async({workId:r,api:o})=>{const{data:e}=await o.get(`/worklib/getsinglework/${r}`);if(!e.ok)throw new Error(e.message);return e.data},d=async({orgId:r,api:o})=>{const{data:e}=await o.get(`/worklib/getallwork/${r}`);if(!e.ok)throw new Error(e.message);return e.data},f=async({workId:r,organizationId:o,api:e})=>{const{data:t}=await e.delete(`/worklib/delete/${o}/${r}`);if(!t.ok)throw new Error(t.message);return t.data},s=["owner","staff","CTO"],h=()=>{const{role:r}=a(),o=n(r);return i({mutationFn:async({formData:e})=>{if(!r||!s.includes(r))throw new Error("Not allowed");if(!o)throw new Error("API not found");return await l({formData:e,api:o})},onSuccess:()=>{u.invalidateQueries({queryKey:["workLibraries"]})}})},E=()=>{const{role:r}=a(),o=n(r);return i({mutationFn:async({workId:e,formData:t})=>{if(!r||!s.includes(r))throw new Error("Not allowed");if(!o)throw new Error("API not found");return await c({workId:e,formData:t,api:o})},onSuccess:(e,{workId:t})=>{u.invalidateQueries({queryKey:["workLibrary",t]})}})},L=r=>{const{role:o}=a(),e=n(o);return w({queryKey:["workLibrary",r],queryFn:async()=>{if(!o||!s.includes(o))throw new Error("Not allowed");if(!e)throw new Error("API not found");return await y({workId:r,api:e})},enabled:!!r,retry:!1})},g=r=>{const{role:o}=a(),e=n(o);return w({queryKey:["workLibraries",r],queryFn:async()=>{if(!o||!s.includes(o))throw new Error("Not allowed");if(!e)throw new Error("API not found");return await d({orgId:r,api:e})},enabled:!!r,retry:!1})},W=()=>{const{role:r}=a(),o=n(r);return i({mutationFn:async({workId:e,organizationId:t})=>{if(!r||!s.includes(r))throw new Error("Not allowed");if(!o)throw new Error("API not found");return await f({workId:e,organizationId:t,api:o})},onSuccess:()=>{u.invalidateQueries({queryKey:["workLibraries"]})}})};export{g as a,W as b,L as c,E as d,h as u};
