import{u as d}from"./useQuery-B4RrmMvA.js";import{k as l,q as w,V as u}from"./index-B7U0voEN.js";import{u as r,g as i}from"./roleCheck-DCYFBDfO.js";const f=async(a,e,t,o)=>{const{data:n}=await o.post(`/installation/${a}/${e}/item/create`,t);if(!n.ok)throw new Error(n.message);return n.data},m=async(a,e,t,o)=>{const{data:n}=await o.put(`/installation/${a}/${e}/item/edit`,t);if(!n.ok)throw new Error(n.message);return n.data},y=async(a,e)=>{const{data:t}=await e.delete(`/installation/${a.projectId}/item/delete`,{data:a});if(!t.ok)throw new Error(t.message);return t.message},I=async(a,e)=>{const{data:t}=await e.get(`/installation/${a}/getalldetail`);if(!t.ok)throw new Error(t.message);return t.data},g=()=>{const a=["CTO","owner","staff","worker"],{role:e}=r(),t=i(e),o=u();return l({mutationFn:async({projectId:n,roomName:s,formData:c})=>{if(!e||!a.includes(e))throw new Error("Not allowed to make this API call.");if(!t)throw new Error("API instance not found.");return await f(n,s,c,t)},onSuccess:(n,{projectId:s})=>{o.invalidateQueries({queryKey:["installation-details",s]})}})},C=()=>{const a=["CTO","owner","staff","worker"],{role:e}=r(),t=i(e),o=u();return l({mutationFn:async({projectId:n,roomName:s,formData:c})=>{if(!e||!a.includes(e))throw new Error("Not allowed to make this API call.");if(!t)throw new Error("API instance not found.");return await m(n,s,c,t)},onSuccess:(n,{projectId:s})=>{o.invalidateQueries({queryKey:["installation-details",s]})}})},q=()=>{const a=["CTO","owner","staff","worker"],{role:e}=r(),t=i(e),o=u();return l({mutationFn:async n=>{if(!e||!a.includes(e))throw new Error("Not allowed to make this API call.");if(!t)throw new Error("API instance not found.");return await y(n,t)},onSuccess:(n,{projectId:s})=>{o.invalidateQueries({queryKey:["installation-details",s]})}})},P=a=>{const e=["CTO","owner","staff","worker","client"],{role:t}=r(),o=i(t);return d({queryKey:["installation-details",a],queryFn:async()=>{if(!t||!e.includes(t))throw new Error("Not allowed to make this API call.");if(!o)throw new Error("API instance not found.");return await I(a,o)},enabled:!!t&&!!a&&!!o,retry:!1,refetchOnMount:!1})},h=async({formId:a,projectId:e,deadLine:t,api:o})=>{const{data:n}=await o.put(`/installation/deadline/${e}/${a}`,{deadLine:t});if(!n.ok)throw new Error(n.message);return n.data},p=async({projectId:a,api:e})=>{const{data:t}=await e.put(`/installation/completionstatus/${a}`);if(!t.ok)throw new Error(t.message);return t.data},$=()=>{const a=["owner","staff","CTO"],{role:e}=r(),t=i(e);return l({mutationFn:async({formId:o,projectId:n,deadLine:s})=>{if(!e||!a.includes(e))throw new Error("not allowed to make this api call");if(!t)throw new Error("API instance missing");return await h({formId:o,projectId:n,deadLine:s,api:t})},onSuccess:()=>{w.invalidateQueries({queryKey:["installation-details"]})}})},R=()=>{const a=["owner","staff","CTO"],{role:e}=r(),t=i(e);return l({mutationFn:async({projectId:o})=>{if(!e||!a.includes(e))throw new Error("not allowed to make this api call");if(!t)throw new Error("API instance missing");return await p({projectId:o,api:t})},onSuccess:(o,{projectId:n})=>{w.invalidateQueries({queryKey:["installation-details",n]})}})};export{R as a,$ as b,g as c,C as d,q as e,P as u};
