import{u as i}from"./useQuery-CnKlDwE3.js";import{u as c}from"./useMutation-DAR9sTyS.js";import{a as n,q as u}from"./index-4xXsHyrq.js";import{g as s}from"./roleCheck-DDX7kp9U.js";const l=async({api:t,body:o})=>{const{data:e}=await t.post("/quote/labour/rateconfig/categories",o);if(!e.ok)throw new Error(e.message);return e.data},E=()=>{const t=["owner","CTO","staff"],{role:o}=n(),e=s(o);return c({mutationFn:async r=>{if(!o||!t.includes(o))throw new Error("Not allowed to make this API call");if(!e)throw new Error("API instance not found for role");return await l({api:e,body:r})},onSuccess:(r,{organizationId:a})=>{u.invalidateQueries({queryKey:["rateconfig","categories",a]})}})},f=async({api:t,organizationId:o})=>{const{data:e}=await t.get(`/quote/labour/rateconfig/categories/${o}`);if(!e.ok)throw new Error(e.message);return e.data},q=t=>{const o=["owner","CTO","staff"],{role:e}=n(),r=s(e);return i({queryKey:["rateconfig","categories",t],queryFn:async()=>{if(!e||!o.includes(e))throw new Error("Not allowed to fetch this data");if(!r)throw new Error("API instance not found for role");return await f({api:r,organizationId:t})},enabled:!!t})},w=async({api:t,organizationId:o})=>{const{data:e}=await t.get(`/quote/labour/rateconfig/categories/${o}/singlesalary`);if(!e.ok)throw new Error(e.message);return e.data},p=t=>{const o=["owner","CTO","staff"],{role:e}=n(),r=s(e);return i({queryKey:["labourcost",t],queryFn:async()=>{if(!e||!o.includes(e))throw new Error("Not allowed to fetch this data");if(!r)throw new Error("API instance not found for role");return await w({api:r,organizationId:t})},enabled:!!t,retry:!1})},d=async({api:t,organizationId:o,items:e})=>{const{data:r}=await t.post(`/quote/labour/rateconfig/categories/${o}/items`,{items:e});if(!r.ok)throw new Error(r.message);return r.data},R=()=>{const t=["owner","CTO","staff"],{role:o}=n(),e=s(o);return c({mutationFn:async({organizationId:r,items:a})=>{if(!o||!t.includes(o))throw new Error("Not allowed to make this API call");if(!e)throw new Error("API instance not found for role");return await d({api:e,items:a,organizationId:r})},onSuccess:(r,{organizationId:a})=>{u.invalidateQueries({queryKey:["rateconfig","items",a]})}})},g=async({api:t,organizationId:o})=>{const{data:e}=await t.get(`/quote/labour/rateconfig/categories/${o}/items`);if(!e.ok)throw new Error(e.message);return e.data},L=t=>{const o=["owner","CTO","staff"],{role:e}=n(),r=s(e);return i({queryKey:["rateconfig","items",t],queryFn:async()=>{if(!e||!o.includes(e))throw new Error("Not allowed to fetch this data");if(!r)throw new Error("API instance not found for role");return await g({api:r,organizationId:t})},enabled:!!t})},y=async({api:t,itemId:o})=>{const{data:e}=await t.delete(`/quote/labour/rateconfig/items/${o}`);if(!e.ok)throw new Error(e.message);return e.data},A=()=>{const t=["owner","CTO","staff"],{role:o}=n(),e=s(o);return c({mutationFn:async({itemId:r})=>{if(!o||!t.includes(o))throw new Error("Not allowed to make this API call");if(!e)throw new Error("API instance not found for role");return await y({api:e,itemId:r})},onSuccess:(r,{organizationId:a})=>{u.invalidateQueries({queryKey:["rateconfig","items",a]})}})};export{L as a,R as b,A as c,E as d,p as e,q as u};
