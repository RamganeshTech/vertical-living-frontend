import{u as l}from"./useQuery-mUmMtORz.js";import{u as s}from"./useMutation-BWlLDX_I.js";import{u as a,g as i}from"./roleCheck-DNL7PxQZ.js";import{q as w}from"./index-DkfQDeIt.js";const m=async({projectId:o,payload:e,token:r,api:t})=>{const{data:n}=await t.post(`/requirementform/createrequirement/${o}?token=${r}`,e);if(!n.ok)throw new Error(n.message);return n.data},d=async({projectId:o,api:e})=>{const{data:r}=await e.get(`/requirementform/getrequirementform/${o}`);if(!r.ok)throw new Error(r.message);return r.data},f=async({projectId:o,api:e})=>{const{data:r}=await e.post(`/requirementform/formsharelink/${o}`);if(!r.ok)throw new Error(r.message);return r.data},h=async({formId:o,projectId:e,api:r})=>{const{data:t}=await r.patch(`/requirementform/formcompleted/${e}/${o}`);if(!t.ok)throw new Error(t.message);return t.data},p=async({formId:o,projectId:e,deadLine:r,api:t})=>{const{data:n}=await t.patch(`/requirementform/deadline/${e}/${o}`,{deadLine:r});if(!n.ok)throw new Error(n.message);return n.data},E=async({formId:o,projectId:e,files:r,api:t})=>{const n=new FormData;return r.forEach(c=>n.append("file",c)),(await t.post(`/requirementform/upload/multiple/${e}/${o}`,n,{headers:{"Content-Type":"multipart/form-data"}})).data},y=async(o,e,r)=>{const{data:t}=await r.patch(`/requirementform/${o}/deleteuploadedfile/${e}`);if(!t.ok)throw new Error(t.message);return t.data},C=()=>{const{role:o}=a(),e=i(o),r=["owner","staff","CTO"];return s({mutationFn:async({projectId:t,fileId:n})=>{if(!o||!r.includes(o))throw new Error("not allowed to make this api call");if(!e)throw new Error("API instance not found for role");return await y(t,n,e)},onSuccess:(t,{projectId:n})=>{w.invalidateQueries({queryKey:["requirementForm",n]})}})},F=async({projectId:o,api:e,updateData:r})=>{const{data:t}=await e.put(`/requirementform/${o}/updatekitchen`,{kitchen:r});if(!t.ok)throw new Error(t.message);return t.data},q=async({projectId:o,api:e,updateData:r})=>{const{data:t}=await e.put(`/requirementform/${o}/updatebedroom`,{bedroom:r});if(!t.ok)throw new Error(t.message);return t.data},k=async({projectId:o,api:e,updateData:r})=>{const{data:t}=await e.put(`/requirementform/${o}/updatewardrobe`,{wardrobe:r});if(!t.ok)throw new Error(t.message);return t.data},R=async({projectId:o,api:e,updateData:r})=>{const{data:t}=await e.put(`/requirementform/${o}/updatelivinghall`,{livingHall:r});if(!t.ok)throw new Error(t.message);return t.data},U=()=>{const o=["owner","staff","CTO","client"],{role:e}=a(),r=i(e);return s({mutationFn:async({projectId:t,payload:n,token:u})=>{if(!e||!o.includes(e))throw new Error("not allowed to make this api call");if(!r)throw new Error("API instance not found for role");return await m({projectId:t,payload:n,token:u,api:r})}})},T=({projectId:o})=>{const e=["owner","staff","CTO","client"],{role:r}=a(),t=i(r);return l({queryKey:["requirementForm"],queryFn:async()=>{if(!r||!e.includes(r))throw new Error("not allowed to make this api call");if(!t)throw new Error("API instance not found for role");return await d({projectId:o,api:t})},retry:!1,refetchOnWindowFocus:!1,staleTime:1e3*60*5})},O=()=>{const o=["owner","staff","CTO"],{role:e}=a(),r=i(e);return s({mutationFn:async({projectId:t})=>{if(!e||!o.includes(e))throw new Error("not allowed to make this api call");if(!r)throw new Error("API instance not found for role");return await f({projectId:t,api:r})}})},z=()=>{const o=["owner","staff","CTO","client"],{role:e}=a(),r=i(e);return s({mutationFn:async({formId:t,projectId:n})=>{if(!e)throw new Error("not authorized");if(!o.includes(e))throw new Error("you  dont have the access to make this api");if(!r)throw new Error("api is null");return await h({formId:t,projectId:n,api:r})}})},A=()=>{const o=["owner","staff","CTO"],{role:e}=a(),r=i(e);return s({mutationFn:async({formId:t,deadLine:n,projectId:u})=>{if(!e)throw new Error("not authorized");if(!o.includes(e))throw new Error("you dont have the access to make this api");if(!r)throw new Error("api is not available");return await p({formId:t,deadLine:n,projectId:u,api:r})}})},D=()=>{const o=["owner","staff","CTO","client"],{role:e}=a(),r=i(e);return s({mutationFn:async({formId:t,files:n,projectId:u})=>{if(!e)throw new Error("not authorized");if(!o.includes(e))throw new Error("you  dont have the access to make this api");if(!r)throw new Error("api is null");return await E({formId:t,projectId:u,files:n,api:r})}})},P=()=>{const o=["client","owner","staff"],{role:e}=a(),r=i(e);return s({mutationFn:async({projectId:t,updateData:n})=>{if(!e)throw new Error("not authorized");if(!o.includes(e))throw new Error("you  dont have the access to make this api");if(!r)throw new Error("api is null");return await F({projectId:t,api:r,updateData:n})}})},S=()=>{const o=["client","owner","staff"],{role:e}=a(),r=i(e);return s({mutationFn:async({projectId:t,updateData:n})=>{if(!e)throw new Error("not authorized");if(!o.includes(e))throw new Error("you  dont have the access to make this api");if(!r)throw new Error("api is null");return await q({projectId:t,api:r,updateData:n})}})},I=()=>{const o=["client","owner","staff"],{role:e}=a(),r=i(e);return s({mutationFn:async({projectId:t,updateData:n})=>{if(!e)throw new Error("not authorized");if(!o.includes(e))throw new Error("you  dont have the access to make this api");if(!r)throw new Error("api is null");return await k({projectId:t,api:r,updateData:n})}})},L=()=>{const o=["client","owner","staff"],{role:e}=a(),r=i(e);return s({mutationFn:async({projectId:t,updateData:n})=>{if(!e)throw new Error("not authorized");if(!o.includes(e))throw new Error("you  dont have the access to make this api");if(!r)throw new Error("api is null");return await R({projectId:t,api:r,updateData:n})}})};export{P as a,L as b,S as c,I as d,T as e,O as f,z as g,A as h,D as i,C as j,U as u};
