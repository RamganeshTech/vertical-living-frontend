import{d as a,f as u,g as i,q as w,h as n}from"./index-CtOe3gZO.js";const l=async({formData:r,api:t})=>{const{data:e}=await t.post("/worklib/creatework",r);if(!e.ok)throw new Error(e.message);return e.data},c=async({workId:r,formData:t,api:e})=>{const{data:o}=await e.put(`/worklib/update/${r}`,t);if(!o.ok)throw new Error(o.message);return o.data},y=async({workId:r,api:t})=>{const{data:e}=await t.get(`/worklib/getsinglework/${r}`);if(!e.ok)throw new Error(e.message);return e.data},d=async({orgId:r,api:t})=>{const{data:e}=await t.get(`/worklib/getallwork/${r}`);if(!e.ok)throw new Error(e.message);return e.data},f=async({workId:r,organizationId:t,api:e})=>{const{data:o}=await e.delete(`/worklib/delete/${t}/${r}`);if(!o.ok)throw new Error(o.message);return o.data},s=["owner","staff","CTO"],b=()=>{const{role:r}=a(),t=n(r);return i({mutationFn:async({formData:e})=>{if(!r||!s.includes(r))throw new Error("Not allowed");if(!t)throw new Error("API not found");return await l({formData:e,api:t})},onSuccess:()=>{w.invalidateQueries({queryKey:["workLibraries"]})}})},h=()=>{const{role:r}=a(),t=n(r);return i({mutationFn:async({workId:e,formData:o})=>{if(!r||!s.includes(r))throw new Error("Not allowed");if(!t)throw new Error("API not found");return await c({workId:e,formData:o,api:t})},onSuccess:(e,{workId:o})=>{w.invalidateQueries({queryKey:["workLibrary",o]})}})},E=r=>{const{role:t}=a(),e=n(t);return u({queryKey:["workLibrary",r],queryFn:async()=>{if(!t||!s.includes(t))throw new Error("Not allowed");if(!e)throw new Error("API not found");return await y({workId:r,api:e})},enabled:!!r,retry:!1})},L=r=>{const{role:t}=a(),e=n(t);return u({queryKey:["workLibraries",r],queryFn:async()=>{if(!t||!s.includes(t))throw new Error("Not allowed");if(!e)throw new Error("API not found");return await d({orgId:r,api:e})},enabled:!!r,retry:!1})},g=()=>{const{role:r}=a(),t=n(r);return i({mutationFn:async({workId:e,organizationId:o})=>{if(!r||!s.includes(r))throw new Error("Not allowed");if(!t)throw new Error("API not found");return await f({workId:e,organizationId:o,api:t})},onSuccess:()=>{w.invalidateQueries({queryKey:["workLibraries"]})}})};export{L as a,g as b,E as c,h as d,b as u};
