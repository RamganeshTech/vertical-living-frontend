import{d as w}from"./useQuery-DmDT-v30.js";import{u as i}from"./useMutation-CSGCjuCw.js";import{d as a,q as c,A as l}from"./index-ftjmZ4WH.js";import{g as s}from"./roleCheck-BuedAs3v.js";const f=async t=>{const{data:o}=await l.post("/orgs/createorganziation",t);if(!o.ok)throw new Error(o.message);return o.data},d=async t=>{const{data:o}=await t.get("/orgs/getorganizations");return o.ok?o.data:null},y=async(t,o)=>{const{data:r}=await o.get(`/orgs/getsingleorganization/${t}`);return r.ok?r.data:{}},h=async({updateField:t,orgsId:o,api:r})=>{const{data:e}=await r.put(`/orgs/updateorganization/${o}`,t);if(!e.ok)throw new Error(e.message);return e.data},g=async(t,o)=>{const{data:r}=await o.put(`/orgs/deleteorganization/${t}`);if(!r.ok)throw new Error(r.message);return r},K=()=>{const t=["owner","staff","CTO","client","worker"],{role:o}=a(),r=s(o);return w({queryKey:["myOrgs"],queryFn:async()=>{if(!o)throw new Error("Not Authorized");if(!t.includes(o))throw new Error("not allowed to make this api call");if(!r)throw new Error("API instance not found for role");return await d(r)},refetchOnWindowFocus:!1,retry:!1})},N=t=>{const o=["owner","staff","CTO","client","worker"],{role:r}=a(),e=s(r);return w({queryKey:["myOrgs"],queryFn:async()=>{if(!r||!o.includes(r))throw new Error("not allowed to make this api call");if(!e)throw new Error("API instance not found for role");return await y(t,e)},refetchOnWindowFocus:!1,retry:!1})},W=()=>{const t=["owner"],{role:o}=a(),r=s(o);return i({mutationFn:async e=>{if(!o)throw new Error("Not authorized");if(!t.includes(o))throw new Error("youre not allowed to access this api");if(!r)throw new Error("api is null");return await f(e)},onSuccess:()=>{c.invalidateQueries({queryKey:["myOrgs"]})}})},P=()=>{const t=["owner"],{role:o}=a(),r=s(o);return i({mutationFn:async({updateField:e,orgsId:n})=>{if(!o)throw new Error("Not authorized");if(!t.includes(o))throw new Error("youre not allowed to access this api");if(!r)throw new Error("api is null");return await h({updateField:e,orgsId:n,api:r})},onSuccess:()=>{c.invalidateQueries({queryKey:["myOrgs"]})}})},B=()=>{const t=["owner"],{role:o}=a(),r=s(o);return i({mutationFn:async e=>{if(!o)throw new Error("Not authorized");if(!t.includes(o))throw new Error("youre not allowed to access this api");if(!r)throw new Error("api is null");return await g(e,r)},onSuccess:()=>{c.invalidateQueries({queryKey:["myOrgs"]})}})},p=async(t,o)=>{const{data:r}=await o.get(`/orgs/getstaffsoforganization/${t}`);return r.ok,r.data},m=async(t,o)=>{const{data:r}=await o.post("/orgs/invitestafftoorganization",t);if(!r.ok)throw new Error(r.message);return r.data},O=async({staffId:t,orgId:o,api:r})=>{const{data:e}=await r.patch(`/orgs/removestafffromorganziation?staffId=${t}&orgId=${o}`);if(!e.ok)throw new Error(e.message);return e.data},I=t=>{const o=["owner","staff","CTO"],{role:r}=a(),e=s(r);return w({queryKey:["staffs",t],queryFn:async()=>{if(!r)throw new Error("Not authrized");if(!o.includes(r))throw new Error("youre not allowed to access this api");if(!e)throw new Error("api is null");return await p(t,e)},enabled:!!t,refetchOnWindowFocus:!1,retry:!1})},Q=()=>{const t=["owner","CTO"],{role:o}=a(),r=s(o);return i({mutationFn:async e=>{if(!o)throw new Error("Not authrized");if(!t.includes(o))throw new Error("youre not allowed to access this api");if(!r)throw new Error("api is null");return await m(e,r)},onSuccess:(e,n)=>{c.invalidateQueries({queryKey:["staffs",n.organizationId]})}})},G=()=>{const t=["owner"],{role:o}=a(),r=s(o);return i({mutationFn:async({staffId:e,orgId:n})=>{if(!o)throw new Error("Not authrized");if(!t.includes(o))throw new Error("youre not allowed to access this api");if(!r)throw new Error("api is null");return await O({staffId:e,orgId:n,api:r})},onSuccess:(e,n)=>{c.invalidateQueries({queryKey:["staffs",n.orgId]})}})},E=async(t,o)=>{const{data:r}=await o.get(`/orgs/getctooforganization/${t}`);return r.ok,r.data},z=async(t,o)=>{const{data:r}=await o.post("/orgs/invitectotoorganization",t);if(!r.ok)throw new Error(r.message);return r.data},k=async({CTOId:t,orgId:o,api:r})=>{const{data:e}=await r.patch(`/orgs/removectofromorganziation?CTOId=${t}&orgId=${o}`);if(!e.ok)throw new Error(e.message);return e.data},b=t=>{const o=["owner","staff","CTO"],{role:r}=a(),e=s(r);return w({queryKey:["CTO",t],queryFn:async()=>{if(!r)throw new Error("Not authrized");if(!o.includes(r))throw new Error("youre not allowed to access this api");if(!e)throw new Error("api is null");return await E(t,e)},enabled:!!t,refetchOnWindowFocus:!1,retry:!1})},j=()=>{const t=["owner"],{role:o}=a(),r=s(o);return i({mutationFn:async e=>{if(!o)throw new Error("Not authrized");if(!t.includes(o))throw new Error("youre not allowed to access this api");if(!r)throw new Error("api is null");return await z(e,r)}})},M=()=>{const t=["owner"],{role:o}=a(),r=s(o);return i({mutationFn:async({CTOId:e,orgId:n})=>{if(!o)throw new Error("Not authrized");if(!t.includes(o))throw new Error("youre not allowed to access this api");if(!r)throw new Error("api is null");return await k({CTOId:e,orgId:n,api:r})},onSuccess:(e,n)=>{c.invalidateQueries({queryKey:["CTO",n.orgId]})}})},v=async({projectId:t,api:o,organizationId:r})=>{const{data:e}=await o.post("orgs/inviteclienttoproject",{projectId:t,organizationId:r});if(!e.ok)throw new Error(e.message);return e.data},_=()=>{const t=["owner","CTO"],{role:o}=a(),r=s(o);return i({mutationFn:async({projectId:e,organizationId:n})=>{if(!o)throw new Error("not authrized");if(!t.includes(o))throw new Error("youre not allowed to access this api");if(!r)throw new Error("api is null");return await v({projectId:e,api:r,organizationId:n})}})},C=async(t,o)=>{const{data:r}=await l.get(`/orgs/getclientsofproject/${t}/${o}`);return r.ok,r.data},x=(t,o)=>{const r=["owner","staff","CTO"],{role:e}=a(),n=s(e);return w({queryKey:["CTO",t],queryFn:async()=>{if(!e||!r.includes(e))throw new Error("not allowed to make this api call");if(!n)throw new Error("API instance not found for role");return await C(t,o)},enabled:!!t,refetchOnWindowFocus:!1,retry:!1})},F=async({payload:t,api:o})=>{const{data:r}=await o.post("orgs/inviteworker",t);if(!r.ok)throw new Error(r.message);return r.data},T=async(t,o)=>{const{data:r}=await o.get(`orgs/getworker/${t}`);if(!r.ok)throw new Error(r.message);return r.data},q=async({workerId:t,orgId:o,projectId:r,api:e})=>{const{data:n}=await e.put(`orgs/removeworker/${o}/${t}/${r}`);if(!n.ok)throw new Error(n.message);return n.data},D=()=>{const t=["owner","staff","CTO"],{role:o}=a(),r=s(o);return i({mutationFn:async e=>{if(!o||!t.includes(o))throw new Error("not allowed to make this api call");if(!r)throw new Error("API instance not found for role");return await F({api:r,payload:e})}})},U=t=>{const o=["owner","staff","CTO"],{role:r}=a(),e=s(r);return w({queryKey:["workers",t],queryFn:async()=>{if(!r||!o.includes(r))throw new Error("Not Allowed to Make this api Call");if(!e)throw new Error("API instance not found for role");return await T(t,e)},enabled:!!t,refetchOnWindowFocus:!1,retry:!1})},H=()=>{const t=["owner","staff","CTO"],{role:o}=a(),r=s(o);return i({mutationFn:async({workerId:e,orgId:n,projectId:u})=>{if(!o||!t.includes(o))throw new Error("not allowed to make this api call");if(!r)throw new Error("API instance not found for role");return await q({workerId:e,orgId:n,projectId:u,api:r})},onSuccess:()=>c.invalidateQueries({queryKey:["workers"]})})};export{W as a,K as b,N as c,P as d,U as e,D as f,H as g,I as h,G as i,Q as j,b as k,M as l,j as m,_ as n,x as o,B as u};
