import{e as s,g as h,f as l,q as w,n as u,h as i}from"./index-D6hrtJW1.js";const d=async(r,t,e,n)=>{const{data:a}=await n.post(`/qualitycheck/${r}/${t}/item/create`,e);if(!a.ok)throw new Error(a.message);return a.data},k=async(r,t,e,n,a)=>{const{data:o}=await a.put(`/qualitycheck/${r}/${t}/${e}/item/edit`,n);if(!o.ok)throw new Error(o.message);return o.data},m=async(r,t,e,n)=>{console.log("deleteimnga the itesm");const{data:a}=await n.delete(`/qualitycheck/${r}/${t}/${e}/item/delete`);if(!a.ok)throw new Error(a.message);return a},f=async(r,t)=>{const{data:e}=await t.get(`/qualitycheck/${r}`);if(!e.ok)throw new Error(e.message);return e.data},E=()=>{const r=["owner","CTO","staff"],{role:t}=s(),e=i(t),n=u();return l({mutationFn:async({projectId:a,roomName:o,formData:c})=>{if(!t||!r.includes(t))throw new Error("Not allowed.");if(!e)throw new Error("can't make the call");return await d(a,o,c,e)},onSuccess:(a,{projectId:o})=>{n.invalidateQueries({queryKey:["quality-checkup",o]})}})},Q=()=>{const r=["owner","CTO","staff"],{role:t}=s(),e=i(t),n=u();return l({mutationFn:async({projectId:a,roomName:o,itemId:c,formData:y})=>{if(!t||!r.includes(t))throw new Error("Not allowed.");if(!e)throw new Error("can't make the call");return await k(a,o,c,y,e)},onSuccess:(a,{projectId:o})=>{n.invalidateQueries({queryKey:["quality-checkup",o]})}})},g=()=>{const r=["owner","CTO","staff"],{role:t}=s(),e=i(t),n=u();return l({mutationFn:async({projectId:a,roomName:o,itemId:c})=>{if(!t||!r.includes(t))throw new Error("Not allowed.");if(!e)throw new Error("can't make the call");return await m(a,o,c,e)},onSuccess:(a,{projectId:o})=>{n.invalidateQueries({queryKey:["quality-checkup",o]})}})},$=r=>{const t=["owner","CTO","staff","worker"],{role:e}=s(),n=i(e);return h({queryKey:["quality-checkup",r],queryFn:async()=>{if(!e||!t.includes(e))throw new Error("Not allowed.");if(!n)throw new Error("can't make the call");return await f(r,n)},enabled:!!r,retry:!1,retryOnMount:!1})},p=async({formId:r,deadLine:t,projectId:e,api:n})=>{const{data:a}=await n.put(`/qualitycheck/deadline/${e}/${r}`,{deadLine:t});if(!a.ok)throw new Error(a.message);return a.data},C=async({projectId:r,api:t})=>{const{data:e}=await t.put(`/qualitycheck/completionstatus/${r}`);if(!e.ok)throw new Error(e.message);return e.data},A=()=>{const r=["owner","staff","CTO"],{role:t}=s(),e=i(t);return l({mutationFn:async({formId:n,deadLine:a,projectId:o})=>{if(!t||!r.includes(t))throw new Error("not allowed to make this api call");if(!e)throw new Error("API instance missing");return await p({formId:n,projectId:o,deadLine:a,api:e})},onSuccess:()=>{w.invalidateQueries({queryKey:["quality-checkup"]})}})},R=()=>{const r=["owner","staff","CTO"],{role:t}=s(),e=i(t);return l({mutationFn:async({projectId:n})=>{if(!t||!r.includes(t))throw new Error("not allowed to make this api call");if(!e)throw new Error("API instance missing");return await C({projectId:n,api:e})},onSuccess:(n,{projectId:a})=>{w.invalidateQueries({queryKey:["quality-checkup",a]})}})};export{A as a,R as b,E as c,Q as d,g as e,$ as u};
