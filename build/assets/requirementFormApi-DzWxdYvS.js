import{y as s,P as m,Q as u,U as c,a0 as w,V as i}from"./index-BbUIXOOD.js";const f=async({projectId:n,payload:e,token:r,api:t})=>{const{data:o}=await t.post(`/requirementform/createrequirement/${n}?token=${r}`,e);if(!o.ok)throw new Error(o.message);return o.data},y=async({projectId:n,payload:e,api:r})=>{const{data:t}=await r.post(`/requirementform/createRoom/${n}`,e);if(!t.ok)throw new Error(t.message);return t},h=async({projectId:n,roomId:e,api:r})=>{const{data:t}=await r.delete(`/requirementform/deleteroom/${n}/${e}`);if(!t.ok)throw new Error(t.message);return t},q=async({projectId:n,roomId:e,itemId:r,payload:t,api:o})=>{const{data:a}=await o.put(`/requirementform/updateroomitem/${n}/${e}/${r}`,t);if(!a.ok)throw new Error(a.message);return a},p=async({projectId:n,roomId:e,itemId:r,api:t})=>{const{data:o}=await t.delete(`/requirementform/deleteitem/${n}/${e}/${r}`);if(!o.ok)throw new Error(o.message);return o},E=async({projectId:n,api:e})=>{const{data:r}=await e.get(`/requirementform/getrequirementform/${n}`);if(!r.ok)throw new Error(r.message);return r==null?void 0:r.data},R=async({projectId:n,roomId:e,api:r})=>{const{data:t}=await r.get(`/requirementform/getroomwise/${n}/${e}`);if(!t.ok)throw new Error(t.message);return t.data},F=async({projectId:n,api:e})=>{const{data:r}=await e.post(`/requirementform/formsharelink/${n}`);if(!r.ok)throw new Error(r.message);return r.data},$=async({formId:n,projectId:e,api:r})=>{const{data:t}=await r.patch(`/requirementform/formcompleted/${e}/${n}`);if(!t.ok)throw new Error(t.message);return t.data},k=async({formId:n,projectId:e,deadLine:r,api:t})=>{const{data:o}=await t.patch(`/requirementform/deadline/${e}/${n}`,{deadLine:r});if(!o.ok)throw new Error(o.message);return o.data},C=async({formId:n,projectId:e,files:r,api:t})=>{const o=new FormData;return r.forEach(l=>o.append("file",l)),(await t.post(`/requirementform/upload/multiple/${e}/${n}`,o,{headers:{"Content-Type":"multipart/form-data"}})).data},A=async(n,e,r)=>{const{data:t}=await r.patch(`/requirementform/${n}/deleteuploadedfile/${e}`);if(!t.ok)throw new Error(t.message);return t.data},Q=()=>{const{role:n}=s(),e=i(n),r=["owner","staff","CTO"];return u({mutationFn:async({projectId:t,fileId:o})=>{if(!n||!r.includes(n))throw new Error("not allowed to make this api call");if(!e)throw new Error("API instance not found for role");return await A(t,o,e)},onSuccess:(t,{projectId:o})=>{c.invalidateQueries({queryKey:["requirementForm",o]})}})},T=()=>{const n=["owner","staff","CTO","client"],{role:e}=s(),r=i(e);return u({mutationFn:async({projectId:t,payload:o,token:a})=>{if(!e||!n.includes(e))throw new Error("not allowed to make this api call");if(!r)throw new Error("API instance not found for role");return await f({projectId:t,payload:o,token:a,api:r})},onSuccess:(t,{projectId:o})=>{c.invalidateQueries({queryKey:["requirementForm",o]})}})},K=()=>{const n=["owner","staff","CTO"],{role:e}=s(),r=i(e);return u({mutationFn:async({projectId:t})=>{if(!e||!n.includes(e))throw new Error("not allowed to make this api call");if(!r)throw new Error("API instance not found for role");return await F({projectId:t,api:r})},onSuccess:(t,{projectId:o})=>{c.invalidateQueries({queryKey:["requirementForm",o]})}})},P=()=>{const n=["owner","staff","CTO","client"],{role:e}=s(),r=i(e);return u({mutationFn:async({formId:t,projectId:o})=>{if(!e)throw new Error("not authorized");if(!n.includes(e))throw new Error("you  dont have the access to make this api");if(!r)throw new Error("api is null");return await $({formId:t,projectId:o,api:r})},onSuccess:(t,{projectId:o})=>{c.invalidateQueries({queryKey:["requirementForm"]}),c.invalidateQueries({queryKey:["siteMeasurement",o]})}})},I=()=>{const n=["owner","staff","CTO"],{role:e}=s(),r=i(e);return u({mutationFn:async({formId:t,deadLine:o,projectId:a})=>{if(!e)throw new Error("not authorized");if(!n.includes(e))throw new Error("you dont have the access to make this api");if(!r)throw new Error("api is not available");return await k({formId:t,deadLine:o,projectId:a,api:r})},onSuccess:(t,{projectId:o})=>{c.invalidateQueries({queryKey:["requirementForm",o]})}})},O=()=>{const n=["owner","staff","CTO","client"],{role:e}=s(),r=i(e);return u({mutationFn:async({formId:t,files:o,projectId:a})=>{if(!e)throw new Error("not authorized");if(!n.includes(e))throw new Error("you  dont have the access to make this api");if(!r)throw new Error("api is null");return await C({formId:t,projectId:a,files:o,api:r})},onSuccess:(t,{projectId:o})=>{c.invalidateQueries({queryKey:["requirementForm",o]})}})},_=()=>{const n=["owner","staff","CTO"],{role:e}=s(),r=i(e),t=w();return u({mutationFn:async({projectId:o,payload:a})=>{if(!e||!n.includes(e))throw new Error("Not allowed");if(!r)throw new Error("API instance not found");return await y({projectId:o,payload:a,api:r})},onSuccess:(o,{projectId:a})=>{t.invalidateQueries({queryKey:["requirementForm",a]})}})},D=()=>{const n=["owner","staff","CTO"],{role:e}=s(),r=i(e),t=w();return u({mutationFn:async({projectId:o,roomId:a})=>{if(!e||!n.includes(e))throw new Error("Not allowed");if(!r)throw new Error("API instance not found");return await h({projectId:o,roomId:a,api:r})},onSuccess:(o,{projectId:a})=>{t.invalidateQueries({queryKey:["requirementForm",a]})}})},b=()=>{const n=["owner","staff","CTO"],{role:e}=s(),r=i(e),t=w();return u({mutationFn:async({projectId:o,roomId:a,itemId:l,payload:d})=>{if(!e||!n.includes(e))throw new Error("Not allowed");if(!r)throw new Error("API instance not found");return await q({projectId:o,roomId:a,itemId:l,payload:d,api:r})},onSuccess:(o,{projectId:a,roomId:l})=>{t.invalidateQueries({queryKey:["requirementFormRoom",a,l]})}})},N=()=>{const n=["owner","staff","CTO"],{role:e}=s(),r=i(e),t=w();return u({mutationFn:async({projectId:o,roomId:a,itemId:l})=>{if(!e||!n.includes(e))throw new Error("Not allowed");if(!r)throw new Error("API instance not found");return await p({projectId:o,roomId:a,itemId:l,api:r})},onSuccess:(o,{projectId:a,roomId:l})=>{t.invalidateQueries({queryKey:["requirementFormRoom",a,l]})}})},U=({projectId:n})=>{const e=["owner","staff","CTO","client"],{role:r}=s(),t=i(r);return m({queryKey:["requirementForm",n],queryFn:async()=>{if(!r||!e.includes(r))throw new Error("Not allowed");if(!t)throw new Error("API instance not found");return await E({projectId:n,api:t})},retry:!1})},G=({projectId:n,roomId:e})=>{const r=["owner","staff","CTO","client"],{role:t}=s(),o=i(t);return m({queryKey:["requirementFormRoom",n,e],queryFn:async()=>{if(!t||!r.includes(t))throw new Error("Not allowed");if(!o)throw new Error("API instance not found");return await R({projectId:n,roomId:e,api:o})},enabled:!!n&&!!e,retry:!1})},g=async(n,e,r,t)=>{const{data:o}=await t.post(`/requirementform/${n}/${e}/upload`,r,{headers:{"Content-Type":"multipart/form-data"}});if(!o.ok)throw new Error(o.message);return o.data},z=()=>{const{role:n}=s(),e=i(n),r=["owner","staff","CTO","client"];return u({mutationFn:async({projectId:t,sectionName:o,files:a})=>{if(!n||!r.includes(n))throw new Error("You are not allowed to make this API call");if(!e)throw new Error("API instance not found for role");return await g(t,o,a,e)},onSuccess:(t,{projectId:o})=>{c.invalidateQueries({queryKey:["requirementForm",o]})}})},S=async(n,e,r,t)=>{const{data:o}=await t.delete(`/requirementform/${n}/${e}/${r}/deletefile`);if(!o.ok)throw new Error(o.message);return o.data},L=()=>{const{role:n}=s(),e=i(n),r=["owner","staff","CTO"];return u({mutationFn:async({projectId:t,sectionName:o,fileId:a})=>{if(!n||!r.includes(n))throw new Error("You are not allowed to make this API call");if(!e)throw new Error("API instance not found for role");return await S(t,o,a,e)},onSuccess:(t,{projectId:o})=>{c.invalidateQueries({queryKey:["requirementForm",o]})}})};export{L as a,G as b,b as c,N as d,U as e,T as f,D as g,K as h,P as i,I as j,O as k,Q as l,_ as m,z as u};
