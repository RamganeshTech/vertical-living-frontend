import{u as c}from"./useQuery-CqjHwNP0.js";import{u as i}from"./useMutation-BqjQ-Xv_.js";import{q as w,A as l}from"./index-e8sHY52i.js";import{u as n,g as a}from"./roleCheck-DbhaipVR.js";const u=async t=>{const{data:o}=await l.post("/orgs/createorganziation",t);if(!o.ok)throw new Error(o.message);return o.data},f=async t=>{const{data:o}=await t.get("/orgs/getorganizations");return o.ok?o.data:null},d=async(t,o)=>{const{data:r}=await o.get(`/orgs/getsingleorganization/${t}`);return r.ok?r.data:{}},y=async({updateField:t,orgsId:o,api:r})=>{const{data:e}=await r.put(`/orgs/updateorganization/${o}`,t);if(!e.ok)throw new Error(e.message);return e.data},h=async(t,o)=>{const{data:r}=await o.put(`/orgs/deleteorganization/${t}`);if(!r.ok)throw new Error(r.message);return r},$=()=>{const t=["owner","staff","CTO","client","worker"],{role:o}=n(),r=a(o);return c({queryKey:["myOrgs"],queryFn:async()=>{if(!o)throw new Error("Not Authorized");if(!t.includes(o))throw new Error("not allowed to make this api call");if(!r)throw new Error("API instance not found for role");return await f(r)},staleTime:5*60*1e3,refetchOnWindowFocus:!1,retry:!1})},N=t=>{const o=["owner","staff","CTO","client","worker"],{role:r}=n(),e=a(r);return c({queryKey:["myOrgs"],queryFn:async()=>{if(!r||!o.includes(r))throw new Error("not allowed to make this api call");if(!e)throw new Error("API instance not found for role");return await d(t,e)},staleTime:5*60*1e3,refetchOnWindowFocus:!1,retry:!1})},K=()=>{const t=["owner"],{role:o}=n(),r=a(o);return i({mutationFn:async e=>{if(!o)throw new Error("Not authorized");if(!t.includes(o))throw new Error("youre not allowed to access this api");if(!r)throw new Error("api is null");return await u(e)},onSuccess:()=>{w.invalidateQueries({queryKey:["myOrgs"]})}})},W=()=>{const t=["owner"],{role:o}=n(),r=a(o);return i({mutationFn:async({updateField:e,orgsId:s})=>{if(!o)throw new Error("Not authorized");if(!t.includes(o))throw new Error("youre not allowed to access this api");if(!r)throw new Error("api is null");return await y({updateField:e,orgsId:s,api:r})},onSuccess:()=>{w.invalidateQueries({queryKey:["myOrgs"]})}})},P=()=>{const t=["owner"],{role:o}=n(),r=a(o);return i({mutationFn:async e=>{if(!o)throw new Error("Not authorized");if(!t.includes(o))throw new Error("youre not allowed to access this api");if(!r)throw new Error("api is null");return await h(e,r)},onSuccess:()=>{w.invalidateQueries({queryKey:["myOrgs"]})}})},g=async(t,o)=>{const{data:r}=await o.get(`/orgs/getstaffsoforganization/${t}`);return r.ok,r.data},p=async(t,o)=>{const{data:r}=await o.post("/orgs/invitestafftoorganization",t);if(!r.ok)throw new Error(r.message);return r.data},m=async({staffId:t,orgId:o,api:r})=>{const{data:e}=await r.patch(`/orgs/removestafffromorganziation?staffId=${t}&orgId=${o}`);if(!e.ok)throw new Error(e.message);return e.data},B=t=>{const o=["owner","staff","CTO"],{role:r}=n(),e=a(r);return c({queryKey:["staffs",t],queryFn:async()=>{if(!r)throw new Error("Not authrized");if(!o.includes(r))throw new Error("youre not allowed to access this api");if(!e)throw new Error("api is null");return await g(t,e)},enabled:!!t,refetchOnWindowFocus:!1,retry:!1})},I=()=>{const t=["owner"],{role:o}=n(),r=a(o);return i({mutationFn:async e=>{if(!o)throw new Error("Not authrized");if(!t.includes(o))throw new Error("youre not allowed to access this api");if(!r)throw new Error("api is null");return await p(e,r)}})},G=()=>{const t=["owner"],{role:o}=n(),r=a(o);return i({mutationFn:async({staffId:e,orgId:s})=>{if(!o)throw new Error("Not authrized");if(!t.includes(o))throw new Error("youre not allowed to access this api");if(!r)throw new Error("api is null");return await m({staffId:e,orgId:s,api:r})},onSuccess:(e,s)=>{w.invalidateQueries({queryKey:["staffs",s.orgId]})}})},E=async(t,o)=>{const{data:r}=await o.get(`/orgs/getctooforganization/${t}`);return r.ok,r.data},O=async(t,o)=>{const{data:r}=await o.post("/orgs/invitectotoorganization",t);if(!r.ok)throw new Error(r.message);return r.data},z=async({CTOId:t,orgId:o,api:r})=>{const{data:e}=await r.patch(`/orgs/removectofromorganziation?CTOId=${t}&orgId=${o}`);if(!e.ok)throw new Error(e.message);return e.data},Q=t=>{const o=["owner","staff","CTO"],{role:r}=n(),e=a(r);return c({queryKey:["CTO",t],queryFn:async()=>{if(!r)throw new Error("Not authrized");if(!o.includes(r))throw new Error("youre not allowed to access this api");if(!e)throw new Error("api is null");return await E(t,e)},enabled:!!t,refetchOnWindowFocus:!1,retry:!1})},b=()=>{const t=["owner"],{role:o}=n(),r=a(o);return i({mutationFn:async e=>{if(!o)throw new Error("Not authrized");if(!t.includes(o))throw new Error("youre not allowed to access this api");if(!r)throw new Error("api is null");return await O(e,r)}})},j=()=>{const t=["owner"],{role:o}=n(),r=a(o);return i({mutationFn:async({CTOId:e,orgId:s})=>{if(!o)throw new Error("Not authrized");if(!t.includes(o))throw new Error("youre not allowed to access this api");if(!r)throw new Error("api is null");return await z({CTOId:e,orgId:s,api:r})},onSuccess:(e,s)=>{w.invalidateQueries({queryKey:["CTO",s.orgId]})}})},k=async({projectId:t,api:o,organizationId:r})=>{const{data:e}=await o.post("orgs/inviteclienttoproject",{projectId:t,organizationId:r});if(!e.ok)throw new Error(e.message);return e.data},M=()=>{const t=["owner","CTO"],{role:o}=n(),r=a(o);return i({mutationFn:async({projectId:e,organizationId:s})=>{if(!o)throw new Error("not authrized");if(!t.includes(o))throw new Error("youre not allowed to access this api");if(!r)throw new Error("api is null");return await k({projectId:e,api:r,organizationId:s})}})},v=async(t,o)=>{const{data:r}=await l.get(`/orgs/getclientsofproject/${t}/${o}`);return r.ok,r.data},_=(t,o)=>{const r=["owner","staff","CTO"],{role:e}=n(),s=a(e);return c({queryKey:["CTO",t],queryFn:async()=>{if(!e||!r.includes(e))throw new Error("not allowed to make this api call");if(!s)throw new Error("API instance not found for role");return await v(t,o)},enabled:!!t,refetchOnWindowFocus:!1,retry:!1})},F=async({payload:t,api:o})=>{const{data:r}=await o.post("orgs/inviteworker",t);if(!r.ok)throw new Error(r.message);return r.data},C=async(t,o)=>{const{data:r}=await o.get(`orgs/getworker/${t}`);if(!r.ok)throw new Error(r.message);return r.data},T=async({workerId:t,projectId:o,api:r})=>{const{data:e}=await r.put(`orgs/removeworker/${t}/${o}`);if(!e.ok)throw new Error(e.message);return e.data},x=()=>{const t=["owner","staff","CTO"],{role:o}=n(),r=a(o);return i({mutationFn:async e=>{if(!o||!t.includes(o))throw new Error("not allowed to make this api call");if(!r)throw new Error("API instance not found for role");return await F({api:r,payload:e})}})},D=t=>{const o=["owner","staff","CTO"],{role:r}=n(),e=a(r);return c({queryKey:["workers",t],queryFn:async()=>{if(!r||!o.includes(r))throw new Error("Not Allowed to Make this api Call");if(!e)throw new Error("API instance not found for role");return await C(t,e)},enabled:!!t,refetchOnWindowFocus:!1,retry:!1})},U=()=>{const t=["owner","staff","CTO"],{role:o}=n(),r=a(o);return i({mutationFn:async({workerId:e,projectId:s})=>{if(!o||!t.includes(o))throw new Error("not allowed to make this api call");if(!r)throw new Error("API instance not found for role");return await T({workerId:e,projectId:s,api:r})},onSuccess:()=>w.invalidateQueries({queryKey:["workers"]})})};export{K as a,$ as b,N as c,W as d,D as e,x as f,U as g,B as h,G as i,I as j,Q as k,j as l,b as m,M as n,_ as o,P as u};
