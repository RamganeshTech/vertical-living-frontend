import{e as r,g as d,f as l,q as c,h as i}from"./index-D6hrtJW1.js";const w=async({projectId:n,roomName:e,api:o})=>{const{data:t}=await o.post(`/sampledesign/${n}/rooms`,{roomName:e});if(!t.ok)throw new Error(t.message);return t.data},m=async({projectId:n,roomName:e,files:o,api:t})=>{const a=new FormData;o.forEach(u=>a.append("files",u));const{data:s}=await t.post(`/sampledesign/${n}/rooms/${e}/upload`,a,{headers:{"Content-Type":"multipart/form-data"}});return s.data},f=async({projectId:n,api:e})=>{const{data:o}=await e.get(`/sampledesign/${n}/rooms`);if(!o.ok)throw new Error(o.message);return o.data},p=async({projectId:n,roomName:e,fileIndex:o,api:t})=>{const{data:a}=await t.delete(`/sampledesign/${n}/rooms/${e}/delete/${o}`);if(!a.ok)throw new Error(a.message);return a.data},h=async({projectId:n,api:e,roomId:o})=>{const{data:t}=await e.delete(`/sampledesign/${n}/${o}/deleteroom`);if(!t.ok)throw new Error(t.message);return t.data},y=async({projectId:n,api:e})=>{const{data:o}=await e.put(`/sampledesign/completionstatus/${n}`);if(!o.ok)throw new Error(o.message);return o.data},g=async({formId:n,projectId:e,deadLine:o,api:t})=>{const{data:a}=await t.put(`/sampledesign/deadline/${e}/${n}`,{deadLine:o});if(!a.ok)throw new Error(a.message);return a.data},R=()=>{const n=["owner","staff","CTO","client"],{role:e}=r(),o=i(e);return l({mutationFn:async({projectId:t,roomName:a})=>{if(!e||!n.includes(e))throw new Error("not allowed to make this api call");if(!o)throw new Error("API instance not found for role");return await w({projectId:t,roomName:a,api:o})},onSuccess:()=>{c.invalidateQueries({queryKey:["sampledesign","rooms"]})}})},F=()=>{const n=["owner","staff","CTO","client"],{role:e}=r(),o=i(e);return l({mutationFn:async({projectId:t,roomName:a,files:s})=>{if(!e||!n.includes(e))throw new Error("not allowed to make this api call");if(!o)throw new Error("API instance not found for role");return await m({projectId:t,roomName:a,files:s,api:o})},onSuccess:()=>{c.invalidateQueries({queryKey:["sampledesign","roomfiles"]})}})},k=n=>{const e=["owner","staff","CTO","client"],{role:o}=r(),t=i(o);return d({queryKey:["sampledesign","roomfiles",n],queryFn:async()=>{if(!o||!e.includes(o))throw new Error("not allowed to make this api call");if(!t)throw new Error("API instance not found for role");return await f({projectId:n,api:t})},retry:!1,refetchOnWindowFocus:!1})},S=()=>{const n=["owner","staff","CTO","client"],{role:e}=r(),o=i(e);return l({mutationFn:async({projectId:t,roomName:a,fileIndex:s})=>{if(!e||!n.includes(e))throw new Error("not allowed to make this api call");if(!o)throw new Error("API instance not found for role");return await p({projectId:t,roomName:a,fileIndex:s,api:o})},onSuccess:()=>{c.invalidateQueries({queryKey:["sampledesign","roomfiles"]})}})},$=()=>{const n=["owner","staff","CTO","client"],{role:e}=r(),o=i(e);return l({mutationFn:async({projectId:t,roomId:a})=>{if(!e||!n.includes(e))throw new Error("not allowed to make this api call");if(!o)throw new Error("API instance not found for role");return await h({projectId:t,roomId:a,api:o})},onSuccess:()=>{c.invalidateQueries({queryKey:["sampledesign","roomfiles"]})}})},C=()=>{const n=["owner","staff","CTO","client"],{role:e}=r(),o=i(e);return l({mutationFn:async({projectId:t})=>{if(!e||!n.includes(e))throw new Error("not allowed to make this api call");if(!o)throw new Error("API instance not found for role");return await y({projectId:t,api:o})},onSuccess:(t,{projectId:a})=>{c.invalidateQueries({queryKey:["sampledesign","roomfiles",a]})}})},D=()=>{const n=["owner","staff","CTO"],{role:e}=r(),o=i(e);return l({mutationFn:async({formId:t,projectId:a,deadLine:s})=>{if(!e)throw new Error("not authorized");if(!n.includes(e))throw new Error("you  dont have the access to make this api");if(!o)throw new Error("api is null");return await g({formId:t,projectId:a,deadLine:s,api:o})}})};export{R as a,F as b,S as c,$ as d,C as e,D as f,k as u};
