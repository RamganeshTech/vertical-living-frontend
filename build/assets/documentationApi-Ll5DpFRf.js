import{h as s,i as l,A as w,k as u,q as d,l as i}from"./index-ogMTmcqi.js";const f=async(o,t)=>{const{data:e}=await t.get(`/documentation/${o}/getalldetails`);if(!e.ok)throw new Error(e.message);return e.data},y=async(o,t,e)=>{const{data:n}=await e.get(`/documentation/${o}/stage/${t}`);if(!n.ok)throw new Error(n.message);return n.data},g=async(o,t,e,n)=>{const a=new FormData;e.forEach(c=>a.append("files",c));const{data:r}=await n.post(`/documentation/${o}/${t}/upload`,a);if(!r.ok)throw new Error(r.message);return r.data},m=async(o,t,e,n)=>{const{data:a}=await n.delete(`/documentation/${o}/${t}/file/${e}`);if(!a.ok)throw new Error(a.message);return a.data},h=async(o,t,e,n)=>{const{data:a}=await n.patch(`/documentation/${o}/${t}/description`,{description:e});if(!a.ok)throw new Error(a.message);return a.data},q=o=>{const t=["owner","CTO","staff","client"],{role:e}=s(),n=i(e);return l({queryKey:["stage-documentation",o],queryFn:async()=>{if(!e||!t.includes(e))throw new Error("Not allowed to make this API call.");if(!n)throw new Error("API instance not found.");return await f(o,n)},enabled:!!e&&!!o&&!!n,retry:!1,refetchOnMount:!1})},P=({projectId:o,stageNumber:t})=>{const e=["owner","CTO","staff","client"],{role:n}=s(),a=i(n);return l({queryKey:["stage-documentation",o,t],queryFn:async()=>{if(!n||!e.includes(n))throw new Error("Not allowed to make this API call.");if(!a)throw new Error("API instance not found.");return await y(o,t,a)},enabled:!!n&&!!o&&t!==void 0&&!!a,retry:!1,refetchOnMount:!1})},F=()=>{const o=["owner","CTO","staff"],{role:t}=s(),e=i(t),n=w();return u({mutationFn:async({projectId:a,stageNumber:r,files:c})=>{if(!t||!o.includes(t))throw new Error("Not allowed.");if(!e)throw new Error("API not found.");return await g(a,r,c,e)},onSuccess:(a,{projectId:r})=>{n.invalidateQueries({queryKey:["stage-documentation",r]})}})},C=()=>{const o=["owner","CTO","staff"],{role:t}=s(),e=i(t),n=w();return u({mutationFn:async({projectId:a,stageNumber:r,fileId:c})=>{if(!t||!o.includes(t))throw new Error("Not allowed.");if(!e)throw new Error("API not found.");return await m(a,r,c,e)},onSuccess:(a,{projectId:r})=>{n.invalidateQueries({queryKey:["stage-documentation",r]})}})},$=()=>{const o=["owner","CTO","staff"],{role:t}=s(),e=i(t),n=w();return u({mutationFn:async({projectId:a,stageNumber:r,description:c})=>{if(!t||!o.includes(t))throw new Error("Not allowed.");if(!e)throw new Error("API not found.");return await h(a,r,c,e)},onSuccess:(a,{projectId:r})=>{n.invalidateQueries({queryKey:["stage-documentation",r]})}})},p=async(o,t)=>{const{data:e}=await t.get(`/documentation/getclient/${o}/byproject`);if(!e.ok)throw new Error(e.message);return e.data},k=o=>{const t=["owner","CTO","staff"],{role:e}=s(),n=i(e);return l({queryKey:["stage-documentation-client",o],queryFn:async()=>{if(!e||!t.includes(e))throw new Error("Not allowed to make this API call.");if(!n)throw new Error("API instance not found.");return await p(o,n)},enabled:!!e&&!!o&&!!n,retry:!1,refetchOnMount:!1})},E=async(o,t,e)=>{const{data:n}=await e.get(`/documentation/sharemessage/${o}/${t}`);if(!n.ok)throw new Error(n.message);return n.data},O=({projectId:o,stageNumber:t})=>{const e=["owner","CTO","staff"],{role:n}=s(),a=i(n);return l({queryKey:["stage-documentation-message",o],queryFn:async()=>{if(!n||!e.includes(n))throw new Error("Not allowed to make this API call.");if(!a)throw new Error("API instance not found.");return await E(o,t,a)},enabled:!!o&&!!t,retry:!1,refetchOnMount:!1})},A=async(o,t,e)=>{const{data:n}=await e.put(`/documentation/updatedocument/${o}/${t}`);return n.data},D=()=>{const o=["owner","CTO","staff"],{role:t}=s(),e=i(t);return u({mutationFn:async({projectId:n,stageNumber:a})=>{if(console.log("stageNumber",a),!t||!o.includes(t))throw new Error("Not allowed to make this API call.");if(!e)throw new Error("API instance not found.");return await A(n,a,e)},onSuccess:(n,{projectId:a})=>{d.invalidateQueries({queryKey:["stage-documentation-message",a]})}})};export{O as a,q as b,P as c,F as d,C as e,$ as f,D as g,k as u};
