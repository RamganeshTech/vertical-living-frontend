import{u as w}from"./useQuery-Bz5JFwsG.js";import{k as l,q as d,V as c}from"./index-Dre-3JFT.js";import{u as s,g as i}from"./roleCheck-CIuNrpTb.js";const f=async(e,n,a,o)=>{const{data:t}=await o.post(`/cleaning/${e}/${n}/upload`,a);if(!t.ok)throw new Error(t.message);return t.data},y=async(e,n,a,o)=>{const{data:t}=await o.delete(`/cleaning/${e}/${n}/${a}/file`);if(!t.ok)throw new Error(t.message);return t},m=async({projectId:e,roomId:n,notes:a,api:o})=>{const{data:t}=await o.put(`/cleaning/${e}/room/${n}/notes`,{notes:a});if(!t.ok)throw new Error(t.message);return t.data},p=async(e,n,a,o)=>{const{data:t}=await o.put(`/cleaning/${e}/${n}/cleaning-status`,{completelyCleaned:a});if(!t.ok)throw new Error(t.message);return t},h=async(e,n)=>{const{data:a}=await n.get(`/cleaning/${e}`);if(!a.ok)throw new Error(a.message);return a.data},C=async(e,n,a)=>{const{data:o}=await a.get(`/cleaning/${e}/${n}`);if(!o.ok)throw new Error(o.message);return o.data},u=["owner","CTO","staff"],$=()=>{const{role:e}=s(),n=i(e),a=c();return l({mutationFn:async({projectId:o,roomId:t,formData:r})=>{if(!e||!u.includes(e))throw new Error("Not allowed.");if(!n)throw new Error("No API instance available.");return await f(o,t,r,n)},onSuccess:(o,{projectId:t})=>{a.invalidateQueries({queryKey:["cleaning-and-sanitation",t]})}})},k=()=>{const{role:e}=s(),n=i(e),a=c();return l({mutationFn:async({projectId:o,roomId:t,fileId:r})=>{if(!e||!u.includes(e))throw new Error("Not allowed.");if(!n)throw new Error("No API instance available.");return await y(o,t,r,n)},onSuccess:(o,{projectId:t})=>{a.invalidateQueries({queryKey:["cleaning-and-sanitation",t]})}})},F=()=>{const e=["owner","CTO","staff"],{role:n}=s(),a=i(n),o=c();return l({mutationFn:async({projectId:t,roomId:r,notes:g})=>{if(!n||!e.includes(n))throw new Error("Not allowed");if(!a)throw new Error("Missing API instance");return await m({projectId:t,roomId:r,notes:g,api:a})},onSuccess:(t,{projectId:r})=>{o.invalidateQueries({queryKey:["cleaning-and-sanitation",r]})}})},N=()=>{const{role:e}=s(),n=i(e),a=c();return l({mutationFn:async({projectId:o,roomId:t,completelyCleaned:r})=>{if(!e||!u.includes(e))throw new Error("Not allowed.");if(!n)throw new Error("No API instance available.");return await p(o,t,r,n)},onSuccess:(o,{projectId:t})=>{a.invalidateQueries({queryKey:["cleaning-and-sanitation",t]})}})},v=e=>{const{role:n}=s(),a=i(n),o=["owner","CTO","staff","worker"];return w({queryKey:["cleaning-and-sanitation",e],queryFn:async()=>{if(!n||!o.includes(n))throw new Error("Not allowed.");if(!a)throw new Error("No API instance available.");return await h(e,a)},enabled:!!e,retry:!1,refetchOnMount:!1})},b=(e,n)=>{const{role:a}=s(),o=i(a),t=["owner","CTO","staff","worker"];return w({queryKey:["cleaning-and-sanitation",e,n],queryFn:async()=>{if(!a||!t.includes(a))throw new Error("Not allowed.");if(!o)throw new Error("No API instance available.");return await C(e,n,o)},enabled:!!e&&!!n,retry:!1,refetchOnMount:!1})},E=async({formId:e,deadLine:n,projectId:a,api:o})=>{const{data:t}=await o.put(`/cleaning/deadline/${a}/${e}`,{deadLine:n});if(!t.ok)throw new Error(t.message);return t.data},A=async({projectId:e,api:n})=>{const{data:a}=await n.put(`/cleaning/completionstatus/${e}`);if(!a.ok)throw new Error(a.message);return a.data},K=()=>{const e=["owner","staff","CTO"],{role:n}=s(),a=i(n);return l({mutationFn:async({formId:o,deadLine:t,projectId:r})=>{if(!n||!e.includes(n))throw new Error("not allowed to make this api call");if(!a)throw new Error("API instance missing");return await E({formId:o,deadLine:t,projectId:r,api:a})},onSuccess:()=>{d.invalidateQueries({queryKey:["cleaning-and-sanitation"]})}})},O=()=>{const e=["owner","staff","CTO"],{role:n}=s(),a=i(n);return l({mutationFn:async({projectId:o})=>{if(!n||!e.includes(n))throw new Error("not allowed to make this api call");if(!a)throw new Error("API instance missing");return await A({projectId:o,api:a})},onSuccess:(o,{projectId:t})=>{d.invalidateQueries({queryKey:["cleaning-and-sanitation",t]})}})};export{K as a,O as b,b as c,$ as d,k as e,N as f,F as g,v as u};
