import{u as o,a as d,b as u,q as f,g as i}from"./index-D5hl8ps7.js";const c=["owner","staff","CTO"],l=async({tasks:t,assigneRole:s,api:a})=>{const e=new FormData;e.append("tasks",JSON.stringify(t)),e.append("assigneRole",s),t.forEach(n=>{n.images&&Array.isArray(n.images)&&n.images.forEach(w=>{w instanceof File&&e.append("files",w)})});const{data:r}=await a.post("/stafftasks/tasks/bulk",e,{headers:{"Content-Type":"multipart/form-data"}});if(!r.ok)throw new Error(r.message);return r.data},k=async({tasks:t,assigneRole:s,api:a})=>{const e=new FormData;e.append("tasks",JSON.stringify(t)),e.append("assigneRole",s),t.forEach(n=>{n.images&&Array.isArray(n.images)&&n.images.forEach(w=>{w instanceof File&&e.append("files",w)})});const{data:r}=await a.post("/stafftasks/tasks/taskfromwork",e,{headers:{"Content-Type":"multipart/form-data"}});if(!r.ok)throw new Error(r.message);return r.data},F=async({title:t,api:s})=>{const{data:a}=await s.get(`/stafftasks/suggest/subtasks?title=${encodeURIComponent(t)}`);if(!a.ok)throw new Error(a.message);return a.steps},y=async({filters:t,api:s,organizationId:a})=>{const e=new URLSearchParams(t).toString(),{data:r}=await s.get(`/stafftasks/${a}/tasks?${e}`);if(!r.ok)throw new Error(r.message);return r.data},h=async({id:t,api:s})=>{const{data:a}=await s.get(`/stafftasks/singletask/${t}`);if(!a.ok)throw new Error(a.message);return a.data},m=async({organizationId:t,filters:s,api:a})=>{const e=new URLSearchParams(s).toString(),{data:r}=await a.get(`/stafftasks/associatedstaffstask/${t}?${e}`);if(!r.ok)throw new Error(r.message);return r.data},p=async({mainTaskId:t,updates:s,api:a})=>{const{data:e}=await a.patch(`/stafftasks/tasks/${t}`,s);if(!e.ok)throw new Error(e.message);return e.data},g=async({mainTaskId:t,api:s})=>{const{data:a}=await s.delete(`/stafftasks/tasks/${t}`);if(!a.ok)throw new Error(a.message);return a.data},E=async({mainTaskId:t,subTaskId:s,taskName:a,api:e})=>{const{data:r}=await e.patch(`/stafftasks/tasks/${t}/subtasks/${s}`,{taskName:a});if(!r.ok)throw new Error(r.message);return r.data},S=async({mainTaskId:t,subTaskId:s,comment:a,api:e})=>{const{data:r}=await e.patch(`/stafftasks/tasks/${t}/${s}/updatecomments`,{comment:a});if(!r.ok)throw new Error(r.message);return r.data},N=async({mainTaskId:t,subTaskId:s,api:a})=>{const{data:e}=await a.delete(`/stafftasks/tasks/${t}/subtasks/${s}`);if(!e.ok)throw new Error(e.message);return e.data},T=async({mainTaskId:t,subTaskId:s,status:a,subTask:e,api:r})=>{const{data:n}=await r.patch(`/stafftasks/tasks/${t}/subtasks/${s}/history`,{status:a,task:e});if(!n.ok)throw new Error(n.message);return n.data},b=()=>{const{role:t}=o(),s=i(t);return u({mutationFn:async({tasks:a,assigneRole:e})=>{if(!t||!c.includes(t))throw new Error("Not allowed");if(!s)throw new Error("Not Authenticated");return await l({tasks:a,assigneRole:e,api:s})},onSuccess:()=>{f.invalidateQueries({queryKey:["stafftasks"]})}})},q=()=>{const{role:t}=o(),s=i(t);return u({mutationFn:async({tasks:a,assigneRole:e})=>{if(!t||!c.includes(t))throw new Error("Not allowed");if(!s)throw new Error("Not Authenticated");return await k({tasks:a,assigneRole:e,api:s})},onSuccess:()=>{f.invalidateQueries({queryKey:["stafftasks"]})}})},$=(t,s)=>{const{role:a}=o(),e=i(a);return d({queryKey:["stafftasks",t,s],queryFn:async()=>{if(!a||!c.includes(a))throw new Error("Not allowed");if(!e)throw new Error("Not Authenticated");return y({filters:s,api:e,organizationId:t})},enabled:!!a})},K=t=>{const{role:s}=o(),a=i(s);return d({queryKey:["singlestafftasks",t],queryFn:async()=>{if(!s||!c.includes(s))throw new Error("Not allowed");if(!a)throw new Error("Not Authenticated");return h({id:t,api:a})},enabled:!!s})},C=(t,s)=>{const{role:a}=o(),e=i(a);return d({queryKey:["associatedstafftasks",t,s],queryFn:async()=>{if(!a||!c.includes(a))throw new Error("Not allowed");if(!e)throw new Error("Not Authenticated");return m({filters:s,api:e,organizationId:t})},enabled:!!a})},Q=()=>{const{role:t}=o(),s=i(t);return u({mutationFn:async({mainTaskId:a,updates:e})=>{if(!t||!c.includes(t))throw new Error("Not allowed");if(!s)throw new Error("API missing");return await p({mainTaskId:a,updates:e,api:s})},onSuccess:(a,{mainTaskId:e})=>{f.invalidateQueries({queryKey:["stafftasks",e]})}})},v=()=>{const{role:t}=o(),s=i(t);return u({mutationFn:async({mainTaskId:a})=>{if(!t||!c.includes(t))throw new Error("Not allowed");if(!s)throw new Error("Not Authenticated");return await g({mainTaskId:a,api:s})},onSuccess:()=>{f.invalidateQueries({queryKey:["stafftasks"]})}})},R=()=>{const{role:t}=o(),s=i(t);return u({mutationFn:async({mainTaskId:a,subTaskId:e,taskName:r})=>{if(!t||!c.includes(t))throw new Error("Not allowed");if(!s)throw new Error("Not Authenticated");return await E({mainTaskId:a,subTaskId:e,taskName:r,api:s})},onSuccess:(a,{mainTaskId:e})=>{f.invalidateQueries({queryKey:["stafftasks",e]})}})},U=()=>{const{role:t}=o(),s=i(t);return u({mutationFn:async({mainTaskId:a,subTaskId:e,comment:r})=>{if(!t||!c.includes(t))throw new Error("Not allowed");if(!s)throw new Error("Not Authenticated");return await S({mainTaskId:a,subTaskId:e,comment:r,api:s})},onSuccess:(a,{mainTaskId:e})=>{f.invalidateQueries({queryKey:["stafftasks",e]})}})},D=()=>{const{role:t}=o(),s=i(t);return u({mutationFn:async({mainTaskId:a,subTaskId:e})=>{if(!t||!c.includes(t))throw new Error("Not allowed");if(!s)throw new Error("Not Authenticated");return await N({mainTaskId:a,subTaskId:e,api:s})},onSuccess:(a,{mainTaskId:e})=>{f.invalidateQueries({queryKey:["stafftasks",e]})}})},M=()=>{const{role:t}=o(),s=i(t);return u({mutationFn:async({mainTaskId:a,subTaskId:e,status:r,subTask:n})=>{if(!t||!c.includes(t))throw new Error("Not allowed");if(!s)throw new Error("Not Authenticated");return await T({mainTaskId:a,subTaskId:e,status:r,subTask:n,api:s})},onSuccess:(a,{mainTaskId:e})=>{f.invalidateQueries({queryKey:["singlestafftasks",e]})}})};export{b as a,q as b,C as c,v as d,M as e,K as f,F as g,Q as h,R as i,D as j,U as k,$ as u};
