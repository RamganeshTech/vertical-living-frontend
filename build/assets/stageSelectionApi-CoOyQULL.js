import{e as n,g as i,n as c,f as u,h as l}from"./index-DBgPBgiq.js";const w=async({projectId:t,api:e})=>(await e.get(`/selectedstage/getselectedstage/${t}`)).data.data,d=async({projectId:t,mode:e,api:o})=>(await o.post(`/selectedstage/updateselectedstage/${t}`,{mode:e})).data.data,g=t=>{const{role:e}=n(),o=l(e),r=["owner","CTO","staff"];return i({queryKey:["stage-selection",t],queryFn:async()=>{if(!e)throw new Error("Not Authorized");if(!r.includes(e))throw new Error("Not allowed to make this API call");if(!o)throw new Error("API instance not found for role");return await w({projectId:t,api:o})},enabled:!!t&&!!e,retry:!1,refetchOnMount:!1})},y=()=>{const t=c(),{role:e}=n(),o=["owner","CTO","staff"],r=l(e);return u({mutationFn:async({projectId:a,mode:s})=>{if(!e)throw new Error("Not Authorized");if(!o.includes(e))throw new Error("Not allowed to make this API call");if(!r)throw new Error("API instance not found for role");return await d({projectId:a,mode:s,api:r})},onSuccess:(a,{projectId:s})=>{t.invalidateQueries({queryKey:["stage-selection",s]})}})};export{y as a,g as u};
