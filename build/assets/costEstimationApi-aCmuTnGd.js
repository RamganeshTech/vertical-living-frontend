import{h as r,i as m,D as c,k as l,l as i}from"./index-Bsb9hJOa.js";const u=["owner","staff","CTO"],f=async(o,e)=>{const{data:t}=await e.get(`/costestimation/${o}`);if(!t.ok)throw new Error(t.message);return t.data},y=async(o,e,t)=>{const{data:a}=await t.get(`/costestimation/${o}/room/${e}`);if(!a.ok)throw new Error(a.message);return a.data},E=async(o,e)=>{const{data:t}=await e.get(`/costestimation/${o}/labour/getlabour`);if(!t.ok)throw new Error(t.message);return t.data},h=async(o,e,t,a,n)=>{const{data:s}=await n.patch(`/costestimation/${o}/material/${t}/${e}`,a);if(!s.ok)throw new Error(s.message);return s.data},p=async(o,e,t)=>{const{data:a}=await t.post(`/costestimation/${o}/labour`,e);if(!a.ok)throw new Error(a.message);return a.data},C=async(o,e,t,a)=>{const{data:n}=await a.patch(`/costestimation/${o}/labour/${e}`,t);if(!n.ok)throw new Error(n.message);return n.data},g=async(o,e,t)=>{const{data:a}=await t.delete(`/costestimation/${o}/labour/${e}`);if(!a.ok)throw new Error(a.message);return a.data},A=async(o,e,t,a)=>{const{data:n}=await a.post(`/costestimation/${o}/uploads/${e}`,t);if(!n.ok)throw new Error(n.message);return n.data},k=async(o,e,t,a)=>{const{data:n}=await a.patch(`/costestimation/${o}/deleteuploadedfile/${e}/${t}`);if(!n.ok)throw new Error(n.message);return n.data},q=async({formId:o,projectId:e,deadLine:t,api:a})=>{const{data:n}=await a.put(`/costestimation/deadline/${e}/${o}`,{deadLine:t});if(!n.ok)throw new Error(n.message);return n.data},b=async({projectId:o,api:e})=>{const{data:t}=await e.put(`/costestimation/completionstatus/${o}`);if(!t.ok)throw new Error(t.message);return t.data},F=o=>{const e=["staff","CTO","owner"],{role:t}=r(),a=i(t);return m({queryKey:["cost-estimation",o],queryFn:async()=>{if(!t||!e.includes(t))throw new Error("not allowed to make this api call");if(!a)throw new Error("API instance not found for role");return await f(o,a)},enabled:!!t&&!!o&&!!a,retry:!1})},P=(o,e)=>{const{role:t}=r(),a=i(t);return m({queryKey:["cost-estimation-room",o,e],queryFn:async()=>{if(!t||!u.includes(t))throw new Error("not allowed to make this api call");if(!a)throw new Error("API instance not found for role");return await y(o,e,a)},enabled:!!t&&!!o&&!!e&&!!a,retry:!1,refetchOnMount:!1})},S=()=>{const o=["owner","staff","CTO"],{role:e}=r(),t=i(e),a=c();return l({mutationFn:async({projectId:n,materialKey:s,updates:w,roomId:d})=>{if(!e||!o.includes(e))throw new Error("not allowed to make this api call");if(!t)throw new Error("API not available");return await h(n,s,d,w,t)},onSuccess:(n,{projectId:s})=>{a.invalidateQueries({queryKey:["cost-estimation-room",s]})}})},K=o=>{const e=["owner","staff","CTO"],{role:t}=r(),a=i(t);return m({queryKey:["labourEstimatation",o],queryFn:async()=>{if(!t||!e.includes(t))throw new Error("not allowed to make this api call");if(!a)throw new Error("API instance not found for role");return await E(o,a)},enabled:!!o,retry:!1,refetchOnMount:!1})},Q=()=>{const{role:o}=r(),e=i(o),t=c();return l({mutationFn:async({projectId:a,labourData:n})=>{if(!o||!u.includes(o))throw new Error("not allowed to make this api call");if(!e)throw new Error("API instance not found for role");return await p(a,n,e)},onSuccess:(a,{projectId:n})=>{t.invalidateQueries({queryKey:["labourEstimatation",n]})}})},R=()=>{const{role:o}=r(),e=i(o),t=c();return l({mutationFn:async({projectId:a,labourId:n,updates:s})=>{if(!o||!u.includes(o))throw new Error("not allowed to make this api call");if(!e)throw new Error("API instance not found for role");return await C(a,n,s,e)},onSuccess:(a,{projectId:n})=>{t.invalidateQueries({queryKey:["cost-estimation",n]})}})},v=()=>{const{role:o}=r(),e=i(o),t=c();return l({mutationFn:async({projectId:a,labourId:n})=>{if(!o||!u.includes(o))throw new Error("not allowed to make this api call");if(!e)throw new Error("API instance not found for role");return await g(a,n,e)},onSuccess:(a,{projectId:n})=>{t.invalidateQueries({queryKey:["cost-estimation",n]})}})},L=()=>{const{role:o}=r(),e=i(o),t=c();return l({mutationFn:async({projectId:a,roomId:n,formData:s})=>{if(!o||!u.includes(o))throw new Error("not allowed to make this api call");if(!e)throw new Error("API instance not found for role");return await A(a,n,s,e)},onSuccess:(a,{projectId:n})=>{t.invalidateQueries({queryKey:["cost-estimation-room",n]})}})},O=()=>{const{role:o}=r(),e=i(o),t=c();return l({mutationFn:async({projectId:a,roomId:n,fileId:s})=>{if(!o||!u.includes(o))throw new Error("not allowed to make this api call");if(!e)throw new Error("API instance not found for role");return await k(a,n,s,e)},onSuccess:(a,{projectId:n})=>{t.invalidateQueries({queryKey:["cost-estimation-room",n]})}})},_=()=>{const o=["owner","staff","CTO"],{role:e}=r(),t=i(e),a=c();return l({mutationFn:async({formId:n,projectId:s,deadLine:w})=>{if(!e||!o.includes(e))throw new Error("not allowed to make this api call");if(!t)throw new Error("API instance missing");return await q({formId:n,projectId:s,deadLine:w,api:t})},onSuccess:()=>{a.invalidateQueries({queryKey:["cost-estimation"]})}})},T=()=>{const o=["owner","staff","CTO"],{role:e}=r(),t=i(e),a=c();return l({mutationFn:async({projectId:n})=>{if(!e||!o.includes(e))throw new Error("not allowed to make this api call");if(!t)throw new Error("API instance missing");return await b({projectId:n,api:t})},onSuccess:(n,{projectId:s})=>{a.invalidateQueries({queryKey:["cost-estimation",s]})}})};export{_ as a,T as b,L as c,O as d,P as e,S as f,K as g,v as h,R as i,Q as j,F as u};
