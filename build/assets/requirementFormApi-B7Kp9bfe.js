import{m as a,n as w,o as s,q as c,v as i}from"./index-JxDlpqED.js";const m=async({projectId:o,payload:e,token:t,api:r})=>{const{data:n}=await r.post(`/requirementform/createrequirement/${o}?token=${t}`,e);if(!n.ok)throw new Error(n.message);return n.data},d=async({projectId:o,api:e})=>{const{data:t}=await e.get(`/requirementform/getrequirementform/${o}`);if(!t.ok)throw new Error(t.message);return t.data},f=async({projectId:o,api:e})=>{const{data:t}=await e.post(`/requirementform/formsharelink/${o}`);if(!t.ok)throw new Error(t.message);return t.data},h=async({formId:o,projectId:e,api:t})=>{const{data:r}=await t.patch(`/requirementform/formcompleted/${e}/${o}`);if(!r.ok)throw new Error(r.message);return r.data},p=async({formId:o,projectId:e,deadLine:t,api:r})=>{const{data:n}=await r.patch(`/requirementform/deadline/${e}/${o}`,{deadLine:t});if(!n.ok)throw new Error(n.message);return n.data},y=async({formId:o,projectId:e,files:t,api:r})=>{const n=new FormData;return t.forEach(l=>n.append("file",l)),(await r.post(`/requirementform/upload/multiple/${e}/${o}`,n,{headers:{"Content-Type":"multipart/form-data"}})).data},E=async(o,e,t)=>{const{data:r}=await t.patch(`/requirementform/${o}/deleteuploadedfile/${e}`);if(!r.ok)throw new Error(r.message);return r.data},C=()=>{const{role:o}=a(),e=i(o),t=["owner","staff","CTO"];return s({mutationFn:async({projectId:r,fileId:n})=>{if(!o||!t.includes(o))throw new Error("not allowed to make this api call");if(!e)throw new Error("API instance not found for role");return await E(r,n,e)},onSuccess:(r,{projectId:n})=>{c.invalidateQueries({queryKey:["requirementForm",n]})}})},q=async({projectId:o,api:e,updateData:t})=>{const{data:r}=await e.put(`/requirementform/${o}/updatekitchen`,{kitchen:t});if(!r.ok)throw new Error(r.message);return r.data},F=async({projectId:o,api:e,updateData:t})=>{const{data:r}=await e.put(`/requirementform/${o}/updatebedroom`,{bedroom:t});if(!r.ok)throw new Error(r.message);return r.data},k=async({projectId:o,api:e,updateData:t})=>{const{data:r}=await e.put(`/requirementform/${o}/updatewardrobe`,{wardrobe:t});if(!r.ok)throw new Error(r.message);return r.data},R=async({projectId:o,api:e,updateData:t})=>{const{data:r}=await e.put(`/requirementform/${o}/updatelivinghall`,{livingHall:t});if(!r.ok)throw new Error(r.message);return r.data},b=()=>{const o=["owner","staff","CTO","client"],{role:e}=a(),t=i(e);return s({mutationFn:async({projectId:r,payload:n,token:u})=>{if(!e||!o.includes(e))throw new Error("not allowed to make this api call");if(!t)throw new Error("API instance not found for role");return await m({projectId:r,payload:n,token:u,api:t})}})},A=({projectId:o})=>{const e=["owner","staff","CTO","client"],{role:t}=a(),r=i(t);return w({queryKey:["requirementForm"],queryFn:async()=>{if(!t||!e.includes(t))throw new Error("not allowed to make this api call");if(!r)throw new Error("API instance not found for role");return await d({projectId:o,api:r})},retry:!1,refetchOnWindowFocus:!1})},S=()=>{const o=["owner","staff","CTO"],{role:e}=a(),t=i(e);return s({mutationFn:async({projectId:r})=>{if(!e||!o.includes(e))throw new Error("not allowed to make this api call");if(!t)throw new Error("API instance not found for role");return await f({projectId:r,api:t})}})},U=()=>{const o=["owner","staff","CTO","client"],{role:e}=a(),t=i(e);return s({mutationFn:async({formId:r,projectId:n})=>{if(!e)throw new Error("not authorized");if(!o.includes(e))throw new Error("you  dont have the access to make this api");if(!t)throw new Error("api is null");return await h({formId:r,projectId:n,api:t})},onSuccess:()=>{c.invalidateQueries({queryKey:["requirementForm"]})}})},T=()=>{const o=["owner","staff","CTO"],{role:e}=a(),t=i(e);return s({mutationFn:async({formId:r,deadLine:n,projectId:u})=>{if(!e)throw new Error("not authorized");if(!o.includes(e))throw new Error("you dont have the access to make this api");if(!t)throw new Error("api is not available");return await p({formId:r,deadLine:n,projectId:u,api:t})}})},O=()=>{const o=["owner","staff","CTO","client"],{role:e}=a(),t=i(e);return s({mutationFn:async({formId:r,files:n,projectId:u})=>{if(!e)throw new Error("not authorized");if(!o.includes(e))throw new Error("you  dont have the access to make this api");if(!t)throw new Error("api is null");return await y({formId:r,projectId:u,files:n,api:t})}})},P=()=>{const o=["client","owner","staff"],{role:e}=a(),t=i(e);return s({mutationFn:async({projectId:r,updateData:n})=>{if(!e)throw new Error("not authorized");if(!o.includes(e))throw new Error("you  dont have the access to make this api");if(!t)throw new Error("api is null");return await q({projectId:r,api:t,updateData:n})}})},I=()=>{const o=["client","owner","staff"],{role:e}=a(),t=i(e);return s({mutationFn:async({projectId:r,updateData:n})=>{if(!e)throw new Error("not authorized");if(!o.includes(e))throw new Error("you  dont have the access to make this api");if(!t)throw new Error("api is null");return await F({projectId:r,api:t,updateData:n})}})},z=()=>{const o=["client","owner","staff"],{role:e}=a(),t=i(e);return s({mutationFn:async({projectId:r,updateData:n})=>{if(!e)throw new Error("not authorized");if(!o.includes(e))throw new Error("you  dont have the access to make this api");if(!t)throw new Error("api is null");return await k({projectId:r,api:t,updateData:n})}})},D=()=>{const o=["client","owner","staff"],{role:e}=a(),t=i(e);return s({mutationFn:async({projectId:r,updateData:n})=>{if(!e)throw new Error("not authorized");if(!o.includes(e))throw new Error("you  dont have the access to make this api");if(!t)throw new Error("api is null");return await R({projectId:r,api:t,updateData:n})}})},g=async(o,e,t,r)=>{const{data:n}=await r.post(`/requirementform/${o}/${e}/upload`,t,{headers:{"Content-Type":"multipart/form-data"}});if(!n.ok)throw new Error(n.message);return n.data},K=()=>{const{role:o}=a(),e=i(o),t=["owner","staff","CTO","client"];return s({mutationFn:async({projectId:r,sectionName:n,files:u})=>{if(!o||!t.includes(o))throw new Error("You are not allowed to make this API call");if(!e)throw new Error("API instance not found for role");return await g(r,n,u,e)},onSuccess:()=>{c.invalidateQueries({queryKey:["requirementForm"]})}})},$=async(o,e,t,r)=>{const{data:n}=await r.delete(`/requirementform/${o}/${e}/${t}/deletefile`);if(!n.ok)throw new Error(n.message);return n.data},Q=()=>{const{role:o}=a(),e=i(o),t=["owner","staff","CTO"];return s({mutationFn:async({projectId:r,sectionName:n,fileId:u})=>{if(!o||!t.includes(o))throw new Error("You are not allowed to make this API call");if(!e)throw new Error("API instance not found for role");return await $(r,n,u,e)},onSuccess:()=>{c.invalidateQueries({queryKey:["requirementForm"]})}})};export{K as a,Q as b,P as c,D as d,I as e,z as f,A as g,S as h,U as i,T as j,O as k,C as l,b as u};
